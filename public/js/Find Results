Searching 5 files for "scube-signin"

/Users/vashoka/code/sparkk/Rivendell/views/login.ejs:
    3  	  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    4  	  <meta name="viewport" content="max-width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    5: 	  <script type="text/javascript" src="/js/scube-signin.js"></script>
    6  	  <script type="text/javascript" src="/js/validator.min.js"></script>
    7  	  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    8: 	  <link href="/styles/scube-signin.css" media="screen" rel="stylesheet" type="text/css">
    9  	  <link href='https://fonts.googleapis.com/css?family=Roboto:300' rel='stylesheet' type='text/css'>
   10  	</head>

2 matches in 1 file


Searching 5 files for "scube-login"

0 matches across 0 files


Searching 3357 files for "/logout"

/Users/vashoka/code/sparkk/Rivendell/node_modules/scube/consumer-app/api-helpers/device/device-mgmt-helper.js:
  213  
  214  
  215:   // This is update the device login/logout status 
  216    this.userDeviceLoginLogout = function(req, res, info, callback) {
  217   

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/index.js:
  114  
  115  /************************* logut ************************/
  116: app.get('/logout', function(req, res) {
  117    namma_auth_obj.logoutAction(req, res);
  118  });

2 matches across 2 files


Searching 3357 files for "logoutAction"

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/index.js:
  115  /************************* logut ************************/
  116  app.get('/logout', function(req, res) {
  117:   namma_auth_obj.logoutAction(req, res);
  118  });
  119  

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/namma-auth-action-route.js:
  152  
  153    // ====== Scube logout route ======
  154:   this.logoutAction = function(req, res) {
  155      // Hack to destroy social login session
  156  

2 matches across 2 files



Searching 3357 files for "/login"

/Users/vashoka/code/sparkk/Rivendell/node_modules/expres/expres.js:
  338     *    res.redirect(301, 'http://example.com');
  339     *    res.redirect('http://example.com', 301);
  340:    *    res.redirect('../login'); // /blog/post/1 -> /blog/login
  341     *
  342     * @param {String} toUrl

/Users/vashoka/code/sparkk/Rivendell/node_modules/expres/package.json:
   29    },
   30    "license": "MIT",
   31:   "readme": "expRes\n======\n\nMiddleware to add express compatible methods to your response objects.\n\n[![build status](https://secure.travis-ci.org/cpsubrian/node-expres.png)](http://travis-ci.org/cpsubrian/node-expres)\n\nUsage\n-----\n\n```js\nvar expres = require('expres'),\n    server = require('http').createServer();\n\nserver.on('request', expres.middleware);\n\n// ...\n```\n\nResponse Methods Added\n----------------------\n\n### status(code)\nSet status `code`.\n\n    res.status(400);\n\n### links(links)\n\nSet Link header field with the given `links`.\n\n    res.links({\n      next: 'http://api.example.com/users?page=2',\n      last: 'http://api.example.com/users?page=5'\n    });\n\n### type(type)\n\nSet the Content-Type to `type`.\n\n    res.type('application/json');\n\n### send(body|status, [body])\n\nSend a response.\n\n    res.send(new Buffer('wahoo'));\n    res.send({ some: 'json' });\n    res.send('<p>some html</p>');\n    res.send(404, 'Sorry, cant find that');\n    res.send(404);\n\n### json(obj|status, [obj])\n\nSend JSON response.\n\n    res.json(null);\n    res.json({ user: 'tj' });\n    res.json(500, 'oh noes!');\n    res.json(404, 'I dont have that');\n\n### jsonp(obj|status, [obj])\n\nSend JSON response with JSONP callback support.\n\n    res.jsonp(null);\n    res.jsonp({ user: 'tj' });\n    res.jsonp(500, 'oh noes!');\n    res.jsonp(404, 'I dont have that');\n\n### format(obj)\n\nRespond to the Acceptable formats using an `obj`\nof content-type callbacks.\n\nContent-Type is set for you, however if you choose\nyou may alter this within the callback using `res.type()`\nor `res.set('Content-Type', ...)`.\n\n    res.format({\n      'text/plain': function () {\n        res.send('hey');\n      },\n      'text/html': function () {\n        res.send('<p>hey</p>');\n      },\n      'appliation/json': function () {\n        res.send({ message: 'hey' });\n      }\n    });\n\nBy default expres passes an `Error`\nwith a `.status` of 406 to `next(err)`\nif a match is not made. If you provide\na `.default` callback it will be invoked\ninstead.\n\n### set(field, [val])\n\nSet header `field` to `val`, or pass\nan object of header fields.\n\n    res.set('Accept', 'application/json');\n    res.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });\n\nAliased as `res.header()`.\n\n### get(field)\n\nGet value for header `field`.\n\n### redirect(toUrl, [status])\n\nRedirect to the given `url` with optional response `status`\ndefaulting to 302.\n\nThe given `url` can also be the name of a mapped url, for\nexample by default expres supports \"back\" which redirects\nto the _Referrer_ or _Referer_ headers or \"/\".\n\n    res.redirect('/foo/bar');\n    res.redirect('http://example.com');\n    res.redirect(301, 'http://example.com');\n    res.redirect('http://example.com', 301);\n    res.redirect('../login'); // /blog/post/1 -> /blog/login\n\n\nCredit\n------\n\nMany of the methods and tests are copied verbatim from express, so, thanks TJ :)\n\n- - -\n\n### Developed by [Terra Eclipse](http://www.terraeclipse.com)\nTerra Eclipse, Inc. is a nationally recognized political technology and\nstrategy firm located in Aptos, CA and Washington, D.C.\n\n- - -\n\n### License: MIT\n\n- Copyright (c) 2009-2012 TJ Holowaychuk <tj@vision-media.ca>\n- Copyright (C) 2012 Terra Eclipse, Inc. (http://www.terraeclipse.com/)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
   32    "readmeFilename": "README.md",
   33    "bugs": {

/Users/vashoka/code/sparkk/Rivendell/node_modules/expres/README.md:
  123      res.redirect(301, 'http://example.com');
  124      res.redirect('http://example.com', 301);
  125:     res.redirect('../login'); // /blog/post/1 -> /blog/login
  126  
  127  

/Users/vashoka/code/sparkk/Rivendell/node_modules/expres/test/redirect.js:
   34        it('should construct scheme-relative urls', function(done){
   35          respond(function(req, res){
   36:           res.redirect('/login');
   37          });
   38  
   39          get('/', function (err, res) {
   40:           assert.equal(res.headers['location'], '//example.com/login');
   41            done();
   42          });
   ..
   77  
   78          get('/', function (err, res) {
   79:           assert.equal(res.headers['location'], '//example.com/login');
   80            done();
   81          });

/Users/vashoka/code/sparkk/Rivendell/node_modules/express/lib/response.js:
  646   *    res.location('/foo/bar').;
  647   *    res.location('http://example.com');
  648:  *    res.location('../login');
  649   *
  650   * @param {String} url
  ...
  677   *    res.redirect(301, 'http://example.com');
  678   *    res.redirect('http://example.com', 301);
  679:  *    res.redirect('../login'); // /blog/post/1 -> /blog/login
  680   *
  681   * @param {String} url

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/jade-language.md:
  303  
  304  ```jade
  305: a(href='/login', title='View login page') Login
  306  ```
  307  

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/Readme_zh-cn.md:
  490  
  491  ```jade
  492: a(href='/login', title='View login page') Login
  493  ```
  494  

/Users/vashoka/code/sparkk/Rivendell/node_modules/passport-facebook/node_modules/passport-oauth2/package.json:
   48      "test": "mocha --reporter spec --require test/bootstrap/node test/*.test.js test/**/*.test.js"
   49    },
   50:   "readme": "# passport-oauth2\n\n[![Build](https://travis-ci.org/jaredhanson/passport-oauth2.png)](https://travis-ci.org/jaredhanson/passport-oauth2)\n[![Coverage](https://coveralls.io/repos/jaredhanson/passport-oauth2/badge.png)](https://coveralls.io/r/jaredhanson/passport-oauth2)\n[![Quality](https://codeclimate.com/github/jaredhanson/passport-oauth2.png)](https://codeclimate.com/github/jaredhanson/passport-oauth2)\n[![Dependencies](https://david-dm.org/jaredhanson/passport-oauth2.png)](https://david-dm.org/jaredhanson/passport-oauth2)\n[![Tips](http://img.shields.io/gittip/jaredhanson.png)](https://www.gittip.com/jaredhanson/)\n\nGeneral-purpose OAuth 2.0 authentication strategy for [Passport](http://passportjs.org/).\n\nThis module lets you authenticate using OAuth 2.0 in your Node.js applications.\nBy plugging into Passport, OAuth 2.0 authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\nNote that this strategy provides generic OAuth 2.0 support.  In many cases, a\nprovider-specific strategy can be used instead, which cuts down on unnecessary\nconfiguration, and accommodates any provider-specific quirks.  See the\n[list](https://github.com/jaredhanson/passport/wiki/Strategies) for supported\nproviders.\n\nDevelopers who need to implement authentication against an OAuth 2.0 provider\nthat is not already supported are encouraged to sub-class this strategy.  If you\nchoose to open source the new provider-specific strategy, please add it to the\nlist so other people can find it.\n\n## Install\n\n    $ npm install passport-oauth2\n\n## Usage\n\n#### Configure Strategy\n\nThe OAuth 2.0 authentication strategy authenticates users using a third-party\naccount and OAuth 2.0 tokens.  The provider's OAuth 2.0 endpoints, as well as\nthe client identifer and secret, are specified as options.  The strategy\nrequires a `verify` callback, which receives an access token and profile,\nand calls `done` providing a user.\n\n    passport.use(new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: EXAMPLE_CLIENT_ID,\n        clientSecret: EXAMPLE_CLIENT_SECRET,\n        callbackURL: \"http://localhost:3000/auth/example/callback\"\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'oauth2'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/example',\n      passport.authenticate('oauth2'));\n\n    app.get('/auth/example/callback',\n      passport.authenticate('oauth2', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Related Modules\n\n- [passport-oauth1](https://github.com/jaredhanson/passport-oauth1) — OAuth 1.0 authentication strategy\n- [passport-http-bearer](https://github.com/jaredhanson/passport-http-bearer) — Bearer token authentication strategy for APIs\n- [OAuth2orize](https://github.com/jaredhanson/oauth2orize) — OAuth 2.0 authorization server toolkit\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2011-2014 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
   51    "readmeFilename": "README.md",
   52    "homepage": "https://github.com/jaredhanson/passport-oauth2",

/Users/vashoka/code/sparkk/Rivendell/node_modules/passport-facebook/node_modules/passport-oauth2/README.md:
   66  
   67      app.get('/auth/example/callback',
   68:       passport.authenticate('oauth2', { failureRedirect: '/login' }),
   69        function(req, res) {
   70          // Successful authentication, redirect home.

/Users/vashoka/code/sparkk/Rivendell/node_modules/passport-facebook/package.json:
   44      "test": "mocha --reporter spec --require test/bootstrap/node test/*.test.js"
   45    },
   46:   "readme": "# passport-facebook\n\n[![Build](https://travis-ci.org/jaredhanson/passport-facebook.png)](https://travis-ci.org/jaredhanson/passport-facebook)\n[![Coverage](https://coveralls.io/repos/jaredhanson/passport-facebook/badge.png)](https://coveralls.io/r/jaredhanson/passport-facebook)\n[![Quality](https://codeclimate.com/github/jaredhanson/passport-facebook.png)](https://codeclimate.com/github/jaredhanson/passport-facebook)\n[![Dependencies](https://david-dm.org/jaredhanson/passport-facebook.png)](https://david-dm.org/jaredhanson/passport-facebook)\n[![Tips](http://img.shields.io/gittip/jaredhanson.png)](https://www.gittip.com/jaredhanson/)\n\n[Passport](http://passportjs.org/) strategy for authenticating with [Facebook](http://www.facebook.com/)\nusing the OAuth 2.0 API.\n\nThis module lets you authenticate using Facebook in your Node.js applications.\nBy plugging into Passport, Facebook authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-facebook\n\n## Usage\n\n#### Configure Strategy\n\nThe Facebook authentication strategy authenticates users using a Facebook\naccount and OAuth 2.0 tokens.  The strategy requires a `verify` callback, which\naccepts these credentials and calls `done` providing a user, as well as\n`options` specifying a app ID, app secret, and callback URL.\n\n    passport.use(new FacebookStrategy({\n        clientID: FACEBOOK_APP_ID,\n        clientSecret: FACEBOOK_APP_SECRET,\n        callbackURL: \"http://localhost:3000/auth/facebook/callback\"\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ facebookId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'facebook'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/facebook',\n      passport.authenticate('facebook'));\n\n    app.get('/auth/facebook/callback',\n      passport.authenticate('facebook', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n#### Extended Permissions\n\nIf you need extended permissions from the user, the permissions can be requested\nvia the `scope` option to `passport.authenticate()`.\n\nFor example, this authorization requests permission to the user's statuses and\ncheckins:\n\n    app.get('/auth/facebook',\n      passport.authenticate('facebook', { scope: ['user_status', 'user_checkins'] }));\n\n#### Display Mode\n\nThe display mode with which to render the authorization dialog can be set by\nspecifying the `display` option.  Refer to Facebook's [OAuth Dialog](https://developers.facebook.com/docs/reference/dialogs/oauth/)\ndocumentation for more information.\n\n    app.get('/auth/facebook',\n      passport.authenticate('facebook', { display: 'touch' }));\n\n#### Profile Fields\n\nThe Facebook profile is very rich, and may contain a lot of information.  The\nstrategy can be configured with a `profileFields` parameter which specifies a\nlist of fields (named by Portable Contacts convention) your application needs.\nFor example, to fetch only user's facebook ID, name, and picture, configure\nstrategy like this.\n\n    passport.use(new FacebookStrategy({\n        // clientID, clientSecret and callbackURL\n        profileFields: ['id', 'displayName', 'photos']\n      },\n      // verify callback\n    ));\n\nIf `profileFields` is not specified, the default fields supplied by Facebook\nwill be parsed.\n\n## Examples\n\nFor a complete, working example, refer to the [login example](https://github.com/jaredhanson/passport-facebook/tree/master/examples/login).\n\n## Issues\n\nFacebook's OAuth 2.0 implementation has a [bug][1] in which the fragment `#_=_`\nis appended to the callback URL.  This appears to affect Firefox and Chrome, but\nnot Safari.  This fragment can be removed via client-side JavaScript, and [@niftylettuce](https://github.com/niftylettuce)\nprovides a suggested [workaround][2].  Developers are encouraged to direct their\ncomplaints to Facebook in an effort to get them to implement a proper fix for\nthis issue.\n[1]: https://developers.facebook.com/bugs/196125357123225\n[2]: https://github.com/jaredhanson/passport-facebook/issues/12#issuecomment-5913711\n\n## Related Modules\n\n- [passport-facebook-canvas](https://github.com/missinglink/passport-facebook-canvas) — authentication for apps on Facebook Canvas\n- [passport-facebook-token](https://github.com/drudge/passport-facebook-token) — authenticate tokens issued to devices (iOS, Android, etc.)\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2011-2014 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
   47    "readmeFilename": "README.md",
   48    "homepage": "https://github.com/jaredhanson/passport-facebook",

/Users/vashoka/code/sparkk/Rivendell/node_modules/passport-facebook/README.md:
   53  
   54      app.get('/auth/facebook/callback',
   55:       passport.authenticate('facebook', { failureRedirect: '/login' }),
   56        function(req, res) {
   57          // Successful authentication, redirect home.
   ..
   99  ## Examples
  100  
  101: For a complete, working example, refer to the [login example](https://github.com/jaredhanson/passport-facebook/tree/master/examples/login).
  102  
  103  ## Issues

/Users/vashoka/code/sparkk/Rivendell/node_modules/passport-google-oauth/package.json:
   43      "node": ">= 0.4.0"
   44    },
   45:   "readme": "# Passport-Google-OAuth\n\n[Passport](http://passportjs.org/) strategies for authenticating with [Google](http://www.google.com/)\nusing OAuth 1.0a and OAuth 2.0.\n\nThis module lets you authenticate using Google in your Node.js applications.\nBy plugging into Passport, Google authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-google-oauth\n\n## Usage of OAuth 1.0\n\n#### Configure Strategy\n\nThe Google OAuth 1.0 authentication strategy authenticates users using a Google\naccount and OAuth tokens.  The strategy requires a `verify` callback, which\naccepts these credentials and calls `done` providing a user, as well as `options`\nspecifying a consumer key, consumer secret, and callback URL.\n\n    passport.use(new GoogleStrategy({\n        consumerKey: GOOGLE_CONSUMER_KEY,\n        consumerSecret: GOOGLE_CONSUMER_SECRET,\n        callbackURL: \"http://127.0.0.1:3000/auth/google/callback\"\n      },\n      function(token, tokenSecret, profile, done) {\n        User.findOrCreate({ googleId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'google'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/google',\n      passport.authenticate('google', { scope: 'https://www.google.com/m8/feeds' }));\n\n    app.get('/auth/google/callback', \n      passport.authenticate('google', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Usage of OAuth 2.0\n\n#### Configure Strategy\n\nThe Google OAuth 2.0 authentication strategy authenticates users using a Google\naccount and OAuth 2.0 tokens.  The strategy requires a `verify` callback, which\naccepts these credentials and calls `done` providing a user, as well as\n`options` specifying a client ID, client secret, and callback URL.\n\n    passport.use(new GoogleStrategy({\n        clientID: GOOGLE_CLIENT_ID,\n        clientSecret: GOOGLE_CLIENT_SECRET,\n        callbackURL: \"http://127.0.0.1:3000/auth/google/callback\"\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ googleId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'google'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/google',\n      passport.authenticate('google'));\n\n    app.get('/auth/google/callback', \n      passport.authenticate('google', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Examples\n\nFor a complete, working example, refer to the [OAuth 1.0 example](https://github.com/jaredhanson/passport-google-oauth/tree/master/examples/oauth)\nand the [OAuth 2.0 example](https://github.com/jaredhanson/passport-google-oauth/tree/master/examples/oauth2).\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n\n[![Build Status](https://secure.travis-ci.org/jaredhanson/passport-google-oauth.png)](http://travis-ci.org/jaredhanson/passport-google-oauth)\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2012-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
   46    "readmeFilename": "README.md",
   47    "homepage": "https://github.com/jaredhanson/passport-google-oauth",

/Users/vashoka/code/sparkk/Rivendell/node_modules/passport-google-oauth/README.md:
   47  
   48      app.get('/auth/google/callback', 
   49:       passport.authenticate('google', { failureRedirect: '/login' }),
   50        function(req, res) {
   51          // Successful authentication, redirect home.
   ..
   86  
   87      app.get('/auth/google/callback', 
   88:       passport.authenticate('google', { failureRedirect: '/login' }),
   89        function(req, res) {
   90          // Successful authentication, redirect home.

/Users/vashoka/code/sparkk/Rivendell/node_modules/passport/lib/passport/index.js:
  185   * Examples:
  186   *
  187:  *     passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' })(req, res);
  188   *
  189   *     passport.authenticate('local', function(err, user) {
  190:  *       if (!user) { return res.redirect('/login'); }
  191   *       res.end('Authenticated!');
  192   *     })(req, res);

/Users/vashoka/code/sparkk/Rivendell/node_modules/passport/lib/passport/middleware/authenticate.js:
   43   * Examples:
   44   *
   45:  *     passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' });
   46   *
   47   *     passport.authenticate('basic', { session: false });

/Users/vashoka/code/sparkk/Rivendell/node_modules/passport/package.json:
   43      "node": ">= 0.4.0"
   44    },
   45:   "readme": "# Passport\n\nPassport is [Express](http://expressjs.com/)-compatible authentication\nmiddleware for [Node.js](http://nodejs.org/).\n\nPassport's sole purpose is to authenticate requests, which it does through an\nextensible set of plugins known as _strategies_.  Passport does not mount\nroutes or assume any particular database schema, which maximizes flexiblity and\nallows application-level decisions to be made by the developer.  The API is\nsimple: you provide Passport a request to authenticate, and Passport provides\nhooks for controlling what occurs when authentication succeeds or fails.\n\n## Install\n\n    $ npm install passport\n\n###### Donate\n\nUsing Passport in your project?  [Donations](https://www.gittip.com/jaredhanson/)\nare greatly appreciated and help support development of this and other quality\nmodules.\n\n## Usage\n\n#### Strategies\n\nPassport uses the concept of strategies to authenticate requests.  Strategies\ncan range from verifying username and password credentials, delegated\nauthentication using [OAuth](http://oauth.net/) (for example, via [Facebook](http://www.facebook.com/)\nor [Twitter](http://twitter.com/)), or federated authentication using [OpenID](http://openid.net/).\n\nBefore authenticating requests, the strategy (or strategies) used by an\napplication must be configured.\n\n    passport.use(new LocalStrategy(\n      function(username, password, done) {\n        User.findOne({ username: username, password: password }, function (err, user) {\n          done(err, user);\n        });\n      }\n    ));\n\n#### Sessions\n\nPassport will maintain persistent login sessions.  In order for persistent\nsessions to work, the authenticated user must be serialized to the session, and\ndeserialized when subsequent requests are made.\n\nPassport does not impose any restrictions on how your user records are stored.\nInstead, you provide functions to Passport which implements the necessary\nserialization and deserialization logic.  In a typical application, this will be\nas simple as serializing the user ID, and finding the user by ID when\ndeserializing.\n\n    passport.serializeUser(function(user, done) {\n      done(null, user.id);\n    });\n\n    passport.deserializeUser(function(id, done) {\n      User.findById(id, function (err, user) {\n        done(err, user);\n      });\n    });\n\n#### Middleware\n\nTo use Passport in an [Express](http://expressjs.com/) or\n[Connect](http://senchalabs.github.com/connect/)-based application, configure it\nwith the required `passport.initialize()` middleware.  If your application uses\npersistent login sessions (recommended, but not required), `passport.session()`\nmiddleware must also be used.\n\n    app.configure(function() {\n      app.use(express.static(__dirname + '/../../public'));\n      app.use(express.cookieParser());\n      app.use(express.bodyParser());\n      app.use(express.session({ secret: 'keyboard cat' }));\n      app.use(passport.initialize());\n      app.use(passport.session());\n      app.use(app.router);\n    });\n\n#### Authenticate Requests\n\nPassport provides an `authenticate()` function, which is used as route\nmiddleware to authenticate requests.\n\n    app.post('/login', \n      passport.authenticate('local', { failureRedirect: '/login' }),\n      function(req, res) {\n        res.redirect('/');\n      });\n\n## Strategies\n\nPassport has a comprehensive set of **over 140** authentication strategies\ncovering social networking, enterprise integration, API services, and more.\nThe [complete list](https://github.com/jaredhanson/passport/wiki/Strategies) is\navailable on the [wiki](https://github.com/jaredhanson/passport/wiki).\n\nThe following table lists commonly used strategies:\n\n|Strategy                                                       | Protocol                 |Developer                                       |\n|---------------------------------------------------------------|--------------------------|------------------------------------------------|\n|[Local](https://github.com/jaredhanson/passport-local)         | HTML form                |[Jared Hanson](https://github.com/jaredhanson)  |\n|[OpenID](https://github.com/jaredhanson/passport-openid)       | OpenID                   |[Jared Hanson](https://github.com/jaredhanson)  |\n|[BrowserID](https://github.com/jaredhanson/passport-browserid) | BrowserID                |[Jared Hanson](https://github.com/jaredhanson)  |\n|[Facebook](https://github.com/jaredhanson/passport-facebook)   | OAuth 2.0                |[Jared Hanson](https://github.com/jaredhanson)  |\n|[Google](https://github.com/jaredhanson/passport-google)       | OpenID                   |[Jared Hanson](https://github.com/jaredhanson)  |\n|[Google](https://github.com/jaredhanson/passport-google-oauth) | OAuth / OAuth 2.0        |[Jared Hanson](https://github.com/jaredhanson)  |\n|[Twitter](https://github.com/jaredhanson/passport-twitter)     | OAuth                    |[Jared Hanson](https://github.com/jaredhanson)  |\n\n## Examples\n\n- For a complete, working example, refer to the [login example](https://github.com/jaredhanson/passport-local/tree/master/examples/login)\nincluded in [passport-local](https://github.com/jaredhanson/passport-local).\n- Please refer to this [tutorial](http://mherman.org/blog/2013/11/10/social-authentication-with-passport-dot-js/) on setting up various social authentication strategies, including a working example found on this [repo](https://github.com/mjhea0/passport-examples).\n\n## Related Modules\n\n- [Locomotive](https://github.com/jaredhanson/locomotive) — Powerful MVC web framework\n- [OAuthorize](https://github.com/jaredhanson/oauthorize) — OAuth service provider toolkit\n- [OAuth2orize](https://github.com/jaredhanson/oauth2orize) — OAuth 2.0 authorization server toolkit\n- [connect-ensure-login](https://github.com/jaredhanson/connect-ensure-login)  — middleware to ensure login sessions\n\nThe [modules](https://github.com/jaredhanson/passport/wiki/Modules) page on the\n[wiki](https://github.com/jaredhanson/passport/wiki) lists other useful modules\nthat build upon or integrate with Passport.\n\n## Tests\n\n    $ npm install --dev\n    $ make test\n\n[![Build Status](https://secure.travis-ci.org/jaredhanson/passport.png)](http://travis-ci.org/jaredhanson/passport)\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2011-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
   46    "readmeFilename": "README.md",
   47    "_id": "passport@0.1.18",

/Users/vashoka/code/sparkk/Rivendell/node_modules/passport/README.md:
   86  middleware to authenticate requests.
   87  
   88:     app.post('/login', 
   89:       passport.authenticate('local', { failureRedirect: '/login' }),
   90        function(req, res) {
   91          res.redirect('/');
   ..
  113  ## Examples
  114  
  115: - For a complete, working example, refer to the [login example](https://github.com/jaredhanson/passport-local/tree/master/examples/login)
  116  included in [passport-local](https://github.com/jaredhanson/passport-local).
  117  - Please refer to this [tutorial](http://mherman.org/blog/2013/11/10/social-authentication-with-passport-dot-js/) on setting up various social authentication strategies, including a working example found on this [repo](https://github.com/mjhea0/passport-examples).

/Users/vashoka/code/sparkk/Rivendell/node_modules/scube/consumer-app/api-helpers/device/device-mgmt-helper.js:
    3  // Here we handle all transactions related to the user device
    4  // Usage: 
    5: // var device = require('sparkk/helpers/login/device-mgmt');
    6  // var dev    = new device();
    7  //////////////////////////////////////////////////////////////////////////

/Users/vashoka/code/sparkk/Rivendell/node_modules/scube/consumer-app/controllers/login/password-mgmt-controller.js:
   33        console.log("we have invalid values");
   34        req.flash('loginMessage', 'Ivalid Request');
   35:       return res.redirect('/login');
   36      }
   37  
   ..
   83                req.flash('loginMessage', 'Password changed succesfully');
   84              }
   85:             return res.redirect('/login');
   86          });
   87     });
   ..
  150      if(!req.query.uuid || !req.query.a2119518 ) {
  151        console.log("validateResetPwdLink : Invalid values present in reset password link");
  152:       return res.redirect('/login?form=fp');
  153      }
  154  
  ...
  165        if (err) {
  166          console.log('verifyResetPwdUuid : DB error');
  167:         return res.redirect('/login?form=fp');
  168        }
  169  
  ...
  172        if(!rows[0][0].status || !rows[0][0].reason) {
  173          console.log("ERROR! SP call did not return row in Email Validation");
  174:         return res.redirect('/login?form=fp');
  175        }
  176  
  ...
  195  
  196              message = 'Wrong link provided! Please enter your email, we will resend the link';
  197:             res.redirect('/login?form=fp');
  198              break;
  199  
  ...
  203  
  204              message = 'Link Expired! Please enter your email, we will resend the link';
  205:             res.redirect('/login?form=fp');
  206              break;
  207  
  ...
  212  
  213              message = 'Wrong link provided! Please enter your email, we will resend the link';
  214:             res.redirect('/login?form=fp');
  215              break;
  216        }

/Users/vashoka/code/sparkk/Rivendell/node_modules/scube/consumer-app/controllers/login/social-auth-controller.js:
  867                          console.log('G+ user exists in db, but token is invalid');
  868  
  869:                         // This will redirect user to /login [failureRedirect]
  870                          return done(err, false);
  871                        }

/Users/vashoka/code/sparkk/Rivendell/node_modules/scube/consumer-app/defines/dir.js:
   24  /*******************************Scube Controllers Paths START**************************************/
   25  //C Implies its controller
   26: //Login Controller
   27: exports.C_LOGIN_NAMMA_AUTH              =  'scube/consumer-app/controllers/login/namma-auth-controller';
   28: exports.C_LOGIN_SOCIAL_AUTH             =  'scube/consumer-app/controllers/login/social-auth-controller';
   29: exports.C_LOGIN_PWD_MANAGEMENT          =  'scube/consumer-app/controllers/login/password-mgmt-controller';
   30: exports.C_LOGIN_EMAIL_VALIDATION        =  'scube/consumer-app/controllers/login/email-validation-controller';
   31  /*******************************Scube Controllers Paths END**************************************/
   32  
   ..
   63  
   64  //Used in APP.js file
   65: exports.R_LOGIN                         = './routes/consumer-app/login/'
   66  exports.R_USER                          = './routes/consumer-app/user/'
   67  exports.R_APIS                          = './routes/consumer-app/apis/'
   ..
   80  exports.R_API_IMAGES                    = './images/images-api-route.js';
   81  
   82: //Login Action Routes
   83  exports.R_LOGIN_NAMMA_AUTH_ACTION            =  './namma-auth-action-route';
   84  exports.R_LOGIN_PASSWORD_MGMT_ACTION         =  './password-mgmt-action-route';

/Users/vashoka/code/sparkk/Rivendell/public/js/scube-password.js:
   27  
   28  function redirectToLoginHome() {
   29:   location.href = '/login';
   30  }
   31  

/Users/vashoka/code/sparkk/Rivendell/public/js/scube-signin.js:
  179          $.ajax({
  180              type: "POST",
  181:             url: "/login",
  182              data: 'email=' + postData.email + '&password=' + postData.password + '&deviceId=' + postData.deviceId,
  183              success: function(data, status, jqXHR) {
  184                  data = JSON.parse(data);
  185:                 console.log('Received /login message : ', data);
  186                  if (data.result === "success" && typeof data.user !== 'undefined') {
  187                      if (typeof window.JsInterface !== 'undefined') {

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/apis/device/device-mgmt-api-route.js:
  209      if(typeof inputData.device_id === 'undefined' || !inputData.device_id) {
  210        res.send(JSON.stringify({ 'error' : 'No device_id  provided for' 
  211:                                      +' post /apis/device/login'}));
  212        return;
  213      }
  ...
  216      if(typeof inputData.user_id === 'undefined' || !inputData.user_id) {
  217        res.send(JSON.stringify({ 'error' : 'No user_id  provided for' 
  218:                                      +' post /apis/device/login'}));
  219        return;
  220      }

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/apis/index.js:
   60  // status.  For namma users, DB does this implicitly
   61  // at the time of sign and sign out
   62: app.post('/apis/device/login', function(req, res) {
   63    deviceMgmtObj.postDeviceLogin(req,res);
   64  });

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/index.js:
   52  app.get('/auth/facebook/callback', passport.authenticate('facebook', {
   53    successRedirect : '/home',
   54:   failureRedirect : '/login'
   55  }));
   56  
   ..
   60  app.get('/auth/google/callback', passport.authenticate('google', {
   61    successRedirect : '/home',
   62:   failureRedirect : '/login'
   63  }));
   64  
   65  /************************* login ************************/
   66: app.get('/login', function(req, res) {
   67    namma_auth_obj.getLoginAction(req, res);
   68  });
   69  
   70  // V1 implementation : Process the login form post request
   71: // app.post('/login', passport.authenticate('local-login', {
   72  //   successRedirect : '/home',
   73: //   failureRedirect : '/login',
   74  //   failureFlash : true
   75  //   })
   ..
   77  
   78  // V2 implementation : get access to req and res objects to control login flow
   79: app.post('/login', function(req, res, next) {
   80    passport.authenticate('local-login', function(err, userObj, info) {
   81      console.log('Namma login passport callback received');
   ..
  104  });
  105  
  106: app.use('/login', function(next) {
  107    console.log('Reached here', err);
  108  });

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/namma-auth-action-route.js:
   27        // Passing it in the redirect
   28        SCUBE_LOG.info("Redirecting to login with app data");
   29:       res.redirect('/login?consumer_app_data='+req.query.consumer_app_data);
   30        return;
   31      }
   ..
   33      //Simple redirect if no data is present
   34      SCUBE_LOG.info("Redirecting to login without app data");
   35:     res.redirect('/login');
   36    }
   37  
   ..
  117        if(req.query.consumer_app_data) {
  118          SCUBE_LOG.info("No Session, in getHome action, redirecting to home with app data");
  119:         res.redirect('/login?consumer_app_data='+req.query.consumer_app_data);
  120        } else {
  121          SCUBE_LOG.info("No Session, in getHome action, redirecting to home without app data");
  122:         res.redirect('/login');
  123        }
  124  
  ...
  159      if(!req.session.passport.user){
  160        SCUBE_LOG.info("Logout Action : No valid session exists in logout action");
  161:       res.redirect('/login');
  162        return;
  163      }
  ...
  180            req.logout();
  181            SCUBE_LOG.info("CALLLLLLLLLLING logout ", req);
  182:           res.redirect('/login');
  183            return; 
  184        } else { // Namma user
  ...
  193            // device id is fetched from android by login/signup form
  194            SCUBE_LOG.info("In logout action Redirecting to login");
  195:           res.redirect('/login');
  196          }, 2000);
  197        }

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/password-mgmt-action-route.js:
   33        console.log("No valid sign in session, redirecting to login page");
   34        req.flash('loginMessage', 'Please Login to change password');
   35:       res.redirect('/login');
   36        return;
   37      } else {  //Allowing change of pwd since he is logged in

71 matches across 28 files


Searching 3357 files for "consumerappdata"

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/namma-auth-action-route.js:
   97        domain       : DEFS.CONST.DOMAIN_URL,  
   98        userDeviceId : deviceId,
   99:       consumerAppData : consumer_app_data
  100      }); // load login view
  101    }

1 match in 1 file


Searching 3357 files for "device registration failure"

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/apis/device/device-mgmt-api-route.js:
   76      deviceMgmtApiObj.register(req, res, deviceInfo, function(retVal) {
   77        if(retVal === "failure") {
   78:         console.log("Device Mgmt Action : Device registration failure");
   79:         res.send(JSON.stringify({ 'failure' : "Device registration failure" }));
   80          return;
   81        }

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/namma-auth-action-route.js:
  169      deviceMgmtApiObj.userDeviceLoginLogout(req, res, info, function(retVal) {
  170        if(retVal === "failure") {
  171:         SCUBE_LOG.info("Device Mgmt Action : Device registration failure");
  172:         res.send(JSON.stringify({ 'failure' : "Device registration failure" }));
  173          return;
  174        }

4 matches across 2 files


Searching 3357 files for "userDeviceLoginLogout"

/Users/vashoka/code/sparkk/Rivendell/node_modules/scube/consumer-app/api-helpers/device/device-mgmt-helper.js:
  214  
  215    // This is update the device login/logout status 
  216:   this.userDeviceLoginLogout = function(req, res, info, callback) {
  217   
  218      var updateDeviceLoginLogoutSp = new sp('usp_update_user_device_logged_status');

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/apis/device/device-mgmt-api-route.js:
  178  
  179      // Update the user logged status
  180:     deviceMgmtApiObj.userDeviceLoginLogout(req, res, deviceIdInfo, function(retVal) {
  181        if(retVal === "failure") {
  182          console.log("Device Mgmt Action : Device, User Id LOGIN LOGOUT" 
  ...
  225  
  226      // Helper call to store the device id in DB 
  227:     deviceMgmtApiObj.userDeviceLoginLogout(req, res, deviceIdInfo, function(retVal) {
  228        if(retVal === "failure") {
  229               console.log("Device Mgmt Action : Device, User Id update failure");

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/namma-auth-action-route.js:
  167      info.action = DEFS.CONST.SESSION_USER_LOGOUT;
  168      
  169:     deviceMgmtApiObj.userDeviceLoginLogout(req, res, info, function(retVal) {
  170        if(retVal === "failure") {
  171          SCUBE_LOG.info("Device Mgmt Action : Device registration failure");

4 matches across 3 files


Searching 3357 files for "Successful reset password link validation response"

/Users/vashoka/code/sparkk/Rivendell/views/reset-password.ejs:
   22          <div class='slider'>
   23            <div class='password-form-container'>
   24:             <!-- Successful reset password link validation response -->
   25              <div class="heading">
   26                <% if(message.length > 0) { %>

1 match in 1 file


Searching 3357 files for "Invalid User Id"

/Users/vashoka/code/sparkk/Rivendell/public/js/scube-password.js:
   75  
   76    if (!userId) {
   77:       message = 'Invalid User Id';
   78        toastMessage(message);
   79    }

1 match in 1 file


Searching 3357 files for "nter the new password"

/Users/vashoka/code/sparkk/Rivendell/node_modules/scube/consumer-app/controllers/login/password-mgmt-controller.js:
  184                req.session.passport.user.isEmailValidated = DEFS.CONST.SESSION_USER_VALIDATED;
  185              }
  186:             console.log('resetPasswordMessage : ', 'Enter the new password');
  187  
  188              result = 'success';

1 match in 1 file


Searching 3358 files for "scube_bg"

/Users/vashoka/code/sparkk/Rivendell/public/styles/scube-activation.css:
    1  body {
    2      margin: 0px;
    3:     background-image: url(../images/signup/scube_bg.jpg);
    4      background-repeat: no-repeat;
    5      background-position: 50% 0%;

/Users/vashoka/code/sparkk/Rivendell/public/styles/scube-password.css:
    1  body {
    2      margin: 0px;
    3:     background-image: url(../images/signup/scube_bg.jpg);
    4      background-repeat: no-repeat;
    5      background-position: 50% 0%;

/Users/vashoka/code/sparkk/Rivendell/public/styles/scube-signin.css:
    1  body {
    2      margin: 0px;
    3:     background-image: url(../images/signup/scube_bg.jpg);
    4      background-repeat: no-repeat;
    5      background-position: 50% 0%;

3 matches across 3 files


Searching 3359 files for "login-success"

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/namma-auth-action-route.js:
  141      SCUBE_LOG.info("User Successfully Logged in Via Social Account. emailId = "+emailId);
  142  
  143:     res.render('login-success.ejs', {
  144        'result' : 'success',
  145        'userId': userId,

/Users/vashoka/code/sparkk/Rivendell/views/login-success.ejs:
   23        if(typeof window.JsInterface !== 'undefined') {
   24          // Define a in-app function to be invoked when social login failed and still reached the app.
   25:         // This should bnever happen because login-success.ejs will be rendered only when login succeeds
   26        } else {
   27          document.write('<div class="message">Social Login Failed from Non-App Environment</div>'');

2 matches across 2 files


Searching 3359 files for "/home"

/Users/vashoka/code/sparkk/Rivendell/node_modules/bunyan/node_modules/mv/node_modules/rimraf/node_modules/glob/node_modules/path-is-absolute/readme.md:
   19  
   20  // Linux
   21: pathIsAbsolute('/home/foo');
   22  //=> true
   23  
   ..
   27  
   28  // Any OS
   29: pathIsAbsolute.posix('/home/foo');
   30  //=> true
   31  ```

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/jade.md:
  159    
  160      ul#menu
  161:       li: a(href='/home') Home
  162        li: a(href='/store') Store
  163        li: a(href='/contact') Contact

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/node_modules/constantinople/node_modules/uglify-js/node_modules/optimist/test/usage.js:
  241  test('rebase', function (t) {
  242      t.equal(
  243:         optimist.rebase('/home/substack', '/home/substack/foo/bar/baz'),
  244          './foo/bar/baz'
  245      );
  246      t.equal(
  247:         optimist.rebase('/home/substack/foo/bar/baz', '/home/substack'),
  248          '../../..'
  249      );
  250      t.equal(
  251:         optimist.rebase('/home/substack/foo', '/home/substack/pow/zoom.txt'),
  252          '../pow/zoom.txt'
  253      );

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/node_modules/constantinople/node_modules/uglify-js/package.json:
   36      "test": "node test/run-tests.js"
   37    },
   38:   "readme": "UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --source-map-include-sources\n                     Pass this flag if you want to include the content of\n                     source files in the source map as sourcesContent\n                     property.                                         [boolean]\n  --in-source-map    Input source map, useful if you're compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don't care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain \"@license\" or \"@preserve\". You can optionally\n                     pass one of the following arguments to this flag:\n                     - \"all\" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --preamble         Preamble to prepend to the output.  You can use this to\n                     insert a comment, for example for licensing information.\n                     This will not be parsed, but the source map will adjust\n                     for its presence.\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `with` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n\n- `dead_code` -- remove unreachable code\n\n- `drop_debugger` -- remove `debugger;` statements\n\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n\n- `evaluate` -- attempt to evaluate constant expressions\n\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n\n- `unused` -- drop unreferenced functions and variables\n\n- `hoist_funs` -- hoist function declarations\n\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n\n- `if_return` -- optimizations for if/return and if/continue\n\n- `join_vars` -- join consecutive `var` statements\n\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n- `pure_getters` -- the default is `false`.  If you pass `true` for\n  this, UglifyJS will assume that object property access\n  (e.g. `foo.bar` or `foo[\"bar\"]`) doesn't have any side effects.\n\n- `pure_funcs` -- default `null`.  You can pass an array of names and\n  UglifyJS will assume that those functions do not produce side\n  effects.  DANGER: will not check if the name is redefined in scope.\n  An example case here, for instance `var q = Math.floor(a/b)`.  If\n  variable `q` is not used elsewhere, UglifyJS will drop it, but will\n  still keep the `Math.floor(a/b)`, not knowing what it does.  You can\n  pass `pure_funcs: [ 'Math.floor' ]` to let it know that this\n  function won't produce any side effect, in which case the whole\n  statement would get discarded.  The current implementation adds some\n  overhead (compression will be slower).\n\n- `drop_console` -- default `false`.  Pass `true` to discard calls to\n  `console.*` functions.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `undefined` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n- `preamble` (default `null`) -- when passed it must be a string and\n  it will be prepended to the output literally.  The source map will\n  adjust for this text.  Can be used to insert a comment containing\n  licensing information, for example.\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file, \"utf8\");\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n",
   39    "readmeFilename": "README.md",
   40    "bugs": {

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/node_modules/constantinople/node_modules/uglify-js/README.md:
  132  For example:
  133  
  134:     uglifyjs /home/doe/work/foo/src/js/file1.js \
  135:              /home/doe/work/foo/src/js/file2.js \
  136               -o foo.min.js \
  137               --source-map foo.min.js.map \

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/node_modules/monocle/node_modules/readdirp/examples/node_modules/event-stream/node_modules/optimist/test/usage.js:
  213  exports.rebase = function () {
  214      assert.equal(
  215:         optimist.rebase('/home/substack', '/home/substack/foo/bar/baz'),
  216          './foo/bar/baz'
  217      );
  218      assert.equal(
  219:         optimist.rebase('/home/substack/foo/bar/baz', '/home/substack'),
  220          '../../..'
  221      );
  222      assert.equal(
  223:         optimist.rebase('/home/substack/foo', '/home/substack/pow/zoom.txt'),
  224          '../pow/zoom.txt'
  225      );

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/node_modules/transformers/node_modules/uglify-js/node_modules/optimist/test/usage.js:
  241  test('rebase', function (t) {
  242      t.equal(
  243:         optimist.rebase('/home/substack', '/home/substack/foo/bar/baz'),
  244          './foo/bar/baz'
  245      );
  246      t.equal(
  247:         optimist.rebase('/home/substack/foo/bar/baz', '/home/substack'),
  248          '../../..'
  249      );
  250      t.equal(
  251:         optimist.rebase('/home/substack/foo', '/home/substack/pow/zoom.txt'),
  252          '../pow/zoom.txt'
  253      );

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/node_modules/transformers/node_modules/uglify-js/package.json:
   31      "test": "node test/run-tests.js"
   32    },
   33:   "readme": "UglifyJS 2\n==========\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n    --source-map       Specify an output file where to generate source map.\n                                                                          [string]\n    --source-map-root  The path to the original source to be included in the\n                       source map.                                        [string]\n    --source-map-url   The path to the source map to be added in //@\n                       sourceMappingURL.  Defaults to the value passed with\n                       --source-map.                                      [string]\n    --in-source-map    Input source map, useful if you're compressing JS that was\n                       generated from some other original code.\n    -p, --prefix       Skip prefix for original filenames that appear in source\n                       maps. For example -p 3 will drop 3 directories from file\n                       names and ensure they are relative paths.\n    -o, --output       Output file (default STDOUT).\n    -b, --beautify     Beautify output/specify output options.            [string]\n    -m, --mangle       Mangle names/pass mangler options.                 [string]\n    -r, --reserved     Reserved names to exclude from mangling.\n    -c, --compress     Enable compressor/pass compressor options. Pass options\n                       like -c hoist_vars=false,if_return=false. Use -c with no\n                       argument to use the default compression options.   [string]\n    -d, --define       Global definitions                                 [string]\n    --comments         Preserve copyright comments in the output. By default this\n                       works like Google Closure, keeping JSDoc-style comments\n                       that contain \"@license\" or \"@preserve\". You can optionally\n                       pass one of the following arguments to this flag:\n                       - \"all\" to keep all comments\n                       - a valid JS regexp (needs to start with a slash) to keep\n                       only comments that match.\n                       Note that currently not *all* comments can be kept when\n                       compression is on, because of dead code removal or\n                       cascading statements into sequences.               [string]\n    --stats            Display operations run time on STDERR.            [boolean]\n    --acorn            Use Acorn for parsing.                            [boolean]\n    --spidermonkey     Assume input fles are SpiderMonkey AST format (as JSON).\n                                                                         [boolean]\n    --self             Build itself (UglifyJS2) as a library (implies\n                       --wrap=UglifyJS --export-all)                     [boolean]\n    --wrap             Embed everything in a big function, making the “exports”\n                       and “global” variables available. You need to pass an\n                       argument to this option to specify the name that your\n                       module will take when included in, say, a browser.\n                                                                          [string]\n    --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                       automatically export all globals.                 [boolean]\n    --lint             Display some scope warnings                       [boolean]\n    -v, --verbose      Verbose                                           [boolean]\n    -V, --version      Print version number and exit.                    [boolean]\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  Optionally you\ncan pass `-m sort=true` (we'll possibly have other flags in the future) in order\nto assign shorter names to most frequently used variables.  This saves a few\nhundred bytes on jQuery before gzip, but the output is _bigger_ after gzip\n(and seems to happen for other libraries I tried it on) therefore it's not\nenabled by default.\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\nThe defaults should be tuned for maximum compression on most code.  Here are\nthe available options (all are `true` by default, except `hoist_vars`):\n\n- `sequences` -- join consecutive simple statements using the comma operator\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n- `dead_code` -- remove unreachable code\n- `drop_debugger` -- remove `debugger;` statements\n- `unsafe` -- apply \"unsafe\" transformations (discussion below)\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n- `evaluate` -- attempt to evaluate constant expressions\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n- `unused` -- drop unreferenced functions and variables\n- `hoist_funs` -- hoist function declarations\n- `hoist_vars` -- hoist `var` declarations (this is `false` by default\n  because it seems to increase the size of the output in general)\n- `if_return` -- optimizations for if/return and if/continue\n- `join_vars` -- join consecutive `var` statements\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n\n    if (DEBUG) {\n        console.log(\"debug stuff\");\n    }\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n\n    const DEBUG = false;\n    const PRODUCTION = true;\n    // etc.\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `ie-proof` (default `true`) -- generate “IE-proof” code (for now this\n  means add brackets around the do/while in code like this: `if (foo) do\n  something(); while (bar); else ...`.\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n\n    function f() {\n      /** @preserve Foo Bar */\n      function g() {\n        // this function is never called\n      }\n      return something();\n    }\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n\n    var UglifyJS = require(\"uglify-js\");\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n\n    var result = UglifyJS.minify(\"/path/to/file.js\");\n    console.log(result.code); // minified output\n    // if you need to pass code instead of file name\n    var result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n\nYou can also compress multiple files:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\n    console.log(result.code);\n\nTo generate a source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\"\n    });\n    console.log(result.code); // minified output\n    console.log(result.map);\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n\n    var result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n        outSourceMap: \"out.js.map\",\n        sourceRoot: \"http://example.com/src\"\n    });\n\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n\n    var result = UglifyJS.minify(\"compiled.js\", {\n        inSourceMap: \"compiled.js.map\",\n        outSourceMap: \"minified.js.map\"\n    });\n    // same as before, it returns `code` and `map`\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n\n    var toplevel_ast = UglifyJS.parse(code, options);\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n\n    var toplevel = null;\n    files.forEach(function(file){\n        var code = fs.readFileSync(file);\n        toplevel = UglifyJS.parse(code, {\n            filename: file,\n            toplevel: toplevel\n        });\n    });\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n\n    toplevel.figure_out_scope()\n\n#### Compression\n\nLike this:\n\n    var compressor = UglifyJS.Compressor(options);\n    var compressed_ast = toplevel.transform(compressor);\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n\n    compressed_ast.figure_out_scope();\n    compressed_ast.compute_char_frequency();\n    compressed_ast.mangle_names();\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n\n    var stream = UglifyJS.OutputStream(options);\n    compressed_ast.print(stream);\n    var code = stream.toString(); // this is your minified code\n\nor, for a shortcut you can do:\n\n    var code = compressed_ast.print_to_string(options);\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n\n    var source_map = UglifyJS.SourceMap(source_map_options);\n    var stream = UglifyJS.OutputStream({\n        ...\n        source_map: source_map\n    });\n    compressed_ast.print(stream);\n\n    var code = stream.toString();\n    var map = source_map.toString(); // json output for your source map\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n",
   34    "readmeFilename": "README.md",
   35    "repository": {

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/node_modules/transformers/node_modules/uglify-js/README.md:
  111  For example:
  112  
  113:     uglifyjs /home/doe/work/foo/src/js/file1.js \
  114:              /home/doe/work/foo/src/js/file2.js \
  115               -o foo.min.js \
  116               --source-map foo.min.js.map \

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/node_modules/with/node_modules/uglify-js/node_modules/optimist/test/usage.js:
  241  test('rebase', function (t) {
  242      t.equal(
  243:         optimist.rebase('/home/substack', '/home/substack/foo/bar/baz'),
  244          './foo/bar/baz'
  245      );
  246      t.equal(
  247:         optimist.rebase('/home/substack/foo/bar/baz', '/home/substack'),
  248          '../../..'
  249      );
  250      t.equal(
  251:         optimist.rebase('/home/substack/foo', '/home/substack/pow/zoom.txt'),
  252          '../pow/zoom.txt'
  253      );

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/node_modules/with/node_modules/uglify-js/package.json:
   36      "test": "node test/run-tests.js"
   37    },
   38:   "readme": "UglifyJS 2\n==========\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.png)](https://travis-ci.org/mishoo/UglifyJS2)\n\nUglifyJS is a JavaScript parser, minifier, compressor or beautifier toolkit.\n\nThis page documents the command line utility.  For\n[API and internals documentation see my website](http://lisperator.net/uglifyjs/).\nThere's also an\n[in-browser online demo](http://lisperator.net/uglifyjs/#demo) (for Firefox,\nChrome and probably Safari).\n\nInstall\n-------\n\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\n(You may need to restart your computer after this step).\n\nFrom NPM for use as a command line app:\n\n    npm install uglify-js -g\n\nFrom NPM for programmatic use:\n\n    npm install uglify-js\n\nFrom Git:\n\n    git clone git://github.com/mishoo/UglifyJS2.git\n    cd UglifyJS2\n    npm link .\n\nUsage\n-----\n\n    uglifyjs [input files] [options]\n\nUglifyJS2 can take multiple input files.  It's recommended that you pass the\ninput files first, then pass the options.  UglifyJS will parse input files\nin sequence and apply any compression options.  The files are parsed in the\nsame global scope, that is, a reference from a file to some\nvariable/function declared in another file will be matched properly.\n\nIf you want to read from STDIN instead, pass a single dash instead of input\nfiles.\n\nThe available options are:\n\n```\n  --source-map       Specify an output file where to generate source map.\n                                                                        [string]\n  --source-map-root  The path to the original source to be included in the\n                     source map.                                        [string]\n  --source-map-url   The path to the source map to be added in //#\n                     sourceMappingURL.  Defaults to the value passed with\n                     --source-map.                                      [string]\n  --source-map-include-sources\n                     Pass this flag if you want to include the content of\n                     source files in the source map as sourcesContent\n                     property.                                         [boolean]\n  --in-source-map    Input source map, useful if you're compressing JS that was\n                     generated from some other original code.\n  --screw-ie8        Pass this flag if you don't care about full compliance\n                     with Internet Explorer 6-8 quirks (by default UglifyJS\n                     will try to be IE-proof).                         [boolean]\n  --expr             Parse a single expression, rather than a program (for\n                     parsing JSON)                                     [boolean]\n  -p, --prefix       Skip prefix for original filenames that appear in source\n                     maps. For example -p 3 will drop 3 directories from file\n                     names and ensure they are relative paths. You can also\n                     specify -p relative, which will make UglifyJS figure out\n                     itself the relative paths between original sources, the\n                     source map and the output file.                    [string]\n  -o, --output       Output file (default STDOUT).\n  -b, --beautify     Beautify output/specify output options.            [string]\n  -m, --mangle       Mangle names/pass mangler options.                 [string]\n  -r, --reserved     Reserved names to exclude from mangling.\n  -c, --compress     Enable compressor/pass compressor options. Pass options\n                     like -c hoist_vars=false,if_return=false. Use -c with no\n                     argument to use the default compression options.   [string]\n  -d, --define       Global definitions                                 [string]\n  -e, --enclose      Embed everything in a big function, with a configurable\n                     parameter/argument list.                           [string]\n  --comments         Preserve copyright comments in the output. By default this\n                     works like Google Closure, keeping JSDoc-style comments\n                     that contain \"@license\" or \"@preserve\". You can optionally\n                     pass one of the following arguments to this flag:\n                     - \"all\" to keep all comments\n                     - a valid JS regexp (needs to start with a slash) to keep\n                     only comments that match.\n                     Note that currently not *all* comments can be kept when\n                     compression is on, because of dead code removal or\n                     cascading statements into sequences.               [string]\n  --preamble         Preamble to prepend to the output.  You can use this to\n                     insert a comment, for example for licensing information.\n                     This will not be parsed, but the source map will adjust\n                     for its presence.\n  --stats            Display operations run time on STDERR.            [boolean]\n  --acorn            Use Acorn for parsing.                            [boolean]\n  --spidermonkey     Assume input files are SpiderMonkey AST format (as JSON).\n                                                                       [boolean]\n  --self             Build itself (UglifyJS2) as a library (implies\n                     --wrap=UglifyJS --export-all)                     [boolean]\n  --wrap             Embed everything in a big function, making the “exports”\n                     and “global” variables available. You need to pass an\n                     argument to this option to specify the name that your\n                     module will take when included in, say, a browser.\n                                                                        [string]\n  --export-all       Only used when --wrap, this tells UglifyJS to add code to\n                     automatically export all globals.                 [boolean]\n  --lint             Display some scope warnings                       [boolean]\n  -v, --verbose      Verbose                                           [boolean]\n  -V, --version      Print version number and exit.                    [boolean]\n```\n\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\ngoes to STDOUT.\n\n## Source map options\n\nUglifyJS2 can generate a source map file, which is highly useful for\ndebugging your compressed JavaScript.  To get a source map, pass\n`--source-map output.js.map` (full path to the file where you want the\nsource map dumped).\n\nAdditionally you might need `--source-map-root` to pass the URL where the\noriginal files can be found.  In case you are passing full paths to input\nfiles to UglifyJS, you can use `--prefix` (`-p`) to specify the number of\ndirectories to drop from the path prefix when declaring files in the source\nmap.\n\nFor example:\n\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\n             /home/doe/work/foo/src/js/file2.js \\\n             -o foo.min.js \\\n             --source-map foo.min.js.map \\\n             --source-map-root http://foo.com/src \\\n             -p 5 -c -m\n\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\nmapping will refer to `http://foo.com/src/js/file1.js` and\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\nas the source map root, and the original files as `js/file1.js` and\n`js/file2.js`).\n\n### Composed source map\n\nWhen you're compressing JS code that was output by a compiler such as\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\noption to take an input source map.  Assuming you have a mapping from\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\ncompressed JS by mapping every token in the compiled JS to its original\nlocation.\n\nTo use this feature you need to pass `--in-source-map\n/path/to/input/source.map`.  Normally the input source map should also point\nto the file containing the generated JS, so if that's correct you can omit\ninput files from the command line.\n\n## Mangler options\n\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\n(comma-separated) options are supported:\n\n- `sort` — to assign shorter names to most frequently used variables.  This\n  saves a few hundred bytes on jQuery before gzip, but the output is\n  _bigger_ after gzip (and seems to happen for other libraries I tried it\n  on) therefore it's not enabled by default.\n\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\n  default).\n\n- `eval` — mangle names visible in scopes where `eval` or `with` are used\n  (disabled by default).\n\nWhen mangling is enabled but you want to prevent certain names from being\nmangled, you can declare those names with `--reserved` (`-r`) — pass a\ncomma-separated list of names.  For example:\n\n    uglifyjs ... -m -r '$,require,exports'\n\nto prevent the `require`, `exports` and `$` names from being changed.\n\n## Compressor options\n\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\nyou can pass a comma-separated list of options.  Options are in the form\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\nto set `true`; it's effectively a shortcut for `foo=true`).\n\n- `sequences` -- join consecutive simple statements using the comma operator\n\n- `properties` -- rewrite property access using the dot notation, for\n  example `foo[\"bar\"] → foo.bar`\n\n- `dead_code` -- remove unreachable code\n\n- `drop_debugger` -- remove `debugger;` statements\n\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\n\n- `conditionals` -- apply optimizations for `if`-s and conditional\n  expressions\n\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\n  `!(a <= b) → a > b` (only when `unsafe`), attempts to negate binary nodes,\n  e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\n\n- `evaluate` -- attempt to evaluate constant expressions\n\n- `booleans` -- various optimizations for boolean context, for example `!!a\n  ? b : c → a ? b : c`\n\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\n  statically determine the condition\n\n- `unused` -- drop unreferenced functions and variables\n\n- `hoist_funs` -- hoist function declarations\n\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\n  by default because it seems to increase the size of the output in general)\n\n- `if_return` -- optimizations for if/return and if/continue\n\n- `join_vars` -- join consecutive `var` statements\n\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\n  and `x = something(), x` into `x = something()`\n\n- `warnings` -- display warnings when dropping unreachable code or unused\n  declarations etc.\n\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\n  where the return value is discarded, to avoid the parens that the\n  code generator would insert.\n\n- `pure_getters` -- the default is `false`.  If you pass `true` for\n  this, UglifyJS will assume that object property access\n  (e.g. `foo.bar` or `foo[\"bar\"]`) doesn't have any side effects.\n\n- `pure_funcs` -- default `null`.  You can pass an array of names and\n  UglifyJS will assume that those functions do not produce side\n  effects.  DANGER: will not check if the name is redefined in scope.\n  An example case here, for instance `var q = Math.floor(a/b)`.  If\n  variable `q` is not used elsewhere, UglifyJS will drop it, but will\n  still keep the `Math.floor(a/b)`, not knowing what it does.  You can\n  pass `pure_funcs: [ 'Math.floor' ]` to let it know that this\n  function won't produce any side effect, in which case the whole\n  statement would get discarded.  The current implementation adds some\n  overhead (compression will be slower).\n\n- `drop_console` -- default `false`.  Pass `true` to discard calls to\n  `console.*` functions.\n\n### The `unsafe` option\n\nIt enables some transformations that *might* break code logic in certain\ncontrived cases, but should be fine for most code.  You might want to try it\non your own code, it should reduce the minified size.  Here's what happens\nwhen this flag is on:\n\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[1, 2, 3 ]`\n- `new Object()` → `{}`\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\n- `typeof foo == \"undefined\"` → `foo === void 0`\n- `void 0` → `undefined` (if there is a variable named \"undefined\" in\n  scope; we do it because the variable name will be mangled, typically\n  reduced to a single character).\n\n### Conditional compilation\n\nYou can use the `--define` (`-d`) switch in order to declare global\nvariables that UglifyJS will assume to be constants (unless defined in\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\ndead code removal UglifyJS will discard the following from the output:\n```javascript\nif (DEBUG) {\n\tconsole.log(\"debug stuff\");\n}\n```\n\nUglifyJS will warn about the condition being always false and about dropping\nunreachable code; for now there is no option to turn off only this specific\nwarning, you can pass `warnings=false` to turn off *all* warnings.\n\nAnother way of doing that is to declare your globals as constants in a\nseparate file and include it into the build.  For example you can have a\n`build/defines.js` file with the following:\n```javascript\nconst DEBUG = false;\nconst PRODUCTION = true;\n// etc.\n```\n\nand build your code like this:\n\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\n\nUglifyJS will notice the constants and, since they cannot be altered, it\nwill evaluate references to them to the value itself and drop unreachable\ncode as usual.  The possible downside of this approach is that the build\nwill contain the `const` declarations.\n\n<a name=\"codegen-options\"></a>\n## Beautifier options\n\nThe code generator tries to output shortest code possible by default.  In\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\ncan pass additional arguments that control the code output:\n\n- `beautify` (default `true`) -- whether to actually beautify the output.\n  Passing `-b` will set this to true, but you might need to pass `-b` even\n  when you want to generate minified code, in order to specify additional\n  arguments, so you can use `-b beautify=false` to override it.\n- `indent-level` (default 4)\n- `indent-start` (default 0) -- prefix all lines by that many spaces\n- `quote-keys` (default `false`) -- pass `true` to quote all keys in literal\n  objects\n- `space-colon` (default `true`) -- insert a space after the colon signs\n- `ascii-only` (default `false`) -- escape Unicode characters in strings and\n  regexps\n- `inline-script` (default `false`) -- escape the slash in occurrences of\n  `</script` in strings\n- `width` (default 80) -- only takes effect when beautification is on, this\n  specifies an (orientative) line width that the beautifier will try to\n  obey.  It refers to the width of the line text (excluding indentation).\n  It doesn't work very well currently, but it does make the code generated\n  by UglifyJS more readable.\n- `max-line-len` (default 32000) -- maximum line length (for uglified code)\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\n  `do`, `while` or `with` statements, even if their body is a single\n  statement.\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\n  you pass `false` then whenever possible we will use a newline instead of a\n  semicolon, leading to more readable output of uglified code (size before\n  gzip could be smaller; size after gzip insignificantly larger).\n- `preamble` (default `null`) -- when passed it must be a string and\n  it will be prepended to the output literally.  The source map will\n  adjust for this text.  Can be used to insert a comment containing\n  licensing information, for example.\n\n### Keeping copyright notices or other comments\n\nYou can pass `--comments` to retain certain comments in the output.  By\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\nkeep only comments that match this regexp.  For example `--comments\n'/foo|bar/'` will keep only comments that contain \"foo\" or \"bar\".\n\nNote, however, that there might be situations where comments are lost.  For\nexample:\n```javascript\nfunction f() {\n\t/** @preserve Foo Bar */\n\tfunction g() {\n\t  // this function is never called\n\t}\n\treturn something();\n}\n```\n\nEven though it has \"@preserve\", the comment will be lost because the inner\nfunction `g` (which is the AST node to which the comment is attached to) is\ndiscarded by the compressor as not referenced.\n\nThe safest comments where to place copyright information (or other info that\nneeds to be kept in the output) are comments attached to toplevel nodes.\n\n## Support for the SpiderMonkey AST\n\nUglifyJS2 has its own abstract syntax tree format; for\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\nwe can't easily change to using the SpiderMonkey AST internally.  However,\nUglifyJS now has a converter which can import a SpiderMonkey AST.\n\nFor example [Acorn][acorn] is a super-fast parser that produces a\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\ncompress that:\n\n    acorn file.js | uglifyjs --spidermonkey -m -c\n\nThe `--spidermonkey` option tells UglifyJS that all input files are not\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\ndon't use our own parser in this case, but just transform that AST into our\ninternal AST.\n\n### Use Acorn for parsing\n\nMore for fun, I added the `--acorn` option which will use Acorn to do all\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\n\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\nin total it's a bit more than just using UglifyJS's own parser.\n\nAPI Reference\n-------------\n\nAssuming installation via NPM, you can load UglifyJS in your application\nlike this:\n```javascript\nvar UglifyJS = require(\"uglify-js\");\n```\n\nIt exports a lot of names, but I'll discuss here the basics that are needed\nfor parsing, mangling and compressing a piece of code.  The sequence is (1)\nparse, (2) compress, (3) mangle, (4) generate output code.\n\n### The simple way\n\nThere's a single toplevel function which combines all the steps.  If you\ndon't need additional customization, you might want to go with `minify`.\nExample:\n```javascript\nvar result = UglifyJS.minify(\"/path/to/file.js\");\nconsole.log(result.code); // minified output\n// if you need to pass code instead of file name\nvar result = UglifyJS.minify(\"var b = function () {};\", {fromString: true});\n```\n\nYou can also compress multiple files:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ]);\nconsole.log(result.code);\n```\n\nTo generate a source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\"\n});\nconsole.log(result.code); // minified output\nconsole.log(result.map);\n```\n\nNote that the source map is not saved in a file, it's just returned in\n`result.map`.  The value passed for `outSourceMap` is only used to set the\n`file` attribute in the source map (see [the spec][sm-spec]).\n\nYou can also specify sourceRoot property to be included in source map:\n```javascript\nvar result = UglifyJS.minify([ \"file1.js\", \"file2.js\", \"file3.js\" ], {\n\toutSourceMap: \"out.js.map\",\n\tsourceRoot: \"http://example.com/src\"\n});\n```\n\nIf you're compressing compiled JavaScript and have a source map for it, you\ncan use the `inSourceMap` argument:\n```javascript\nvar result = UglifyJS.minify(\"compiled.js\", {\n\tinSourceMap: \"compiled.js.map\",\n\toutSourceMap: \"minified.js.map\"\n});\n// same as before, it returns `code` and `map`\n```\n\nThe `inSourceMap` is only used if you also request `outSourceMap` (it makes\nno sense otherwise).\n\nOther options:\n\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\n\n- `fromString` (default `false`) — if you pass `true` then you can pass\n  JavaScript source code, rather than file names.\n\n- `mangle` — pass `false` to skip mangling names.\n\n- `output` (default `null`) — pass an object if you wish to specify\n  additional [output options][codegen].  The defaults are optimized\n  for best compression.\n\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\n  Pass an object to specify custom [compressor options][compressor].\n\nWe could add more options to `UglifyJS.minify` — if you need additional\nfunctionality please suggest!\n\n### The hard way\n\nFollowing there's more detailed API info, in case the `minify` function is\ntoo simple for your needs.\n\n#### The parser\n```javascript\nvar toplevel_ast = UglifyJS.parse(code, options);\n```\n\n`options` is optional and if present it must be an object.  The following\nproperties are available:\n\n- `strict` — disable automatic semicolon insertion and support for trailing\n  comma in arrays and objects\n- `filename` — the name of the file where this code is coming from\n- `toplevel` — a `toplevel` node (as returned by a previous invocation of\n  `parse`)\n\nThe last two options are useful when you'd like to minify multiple files and\nget a single file as the output and a proper source map.  Our CLI tool does\nsomething like this:\n```javascript\nvar toplevel = null;\nfiles.forEach(function(file){\n\tvar code = fs.readFileSync(file, \"utf8\");\n\ttoplevel = UglifyJS.parse(code, {\n\t\tfilename: file,\n\t\ttoplevel: toplevel\n\t});\n});\n```\n\nAfter this, we have in `toplevel` a big AST containing all our files, with\neach token having proper information about where it came from.\n\n#### Scope information\n\nUglifyJS contains a scope analyzer that you need to call manually before\ncompressing or mangling.  Basically it augments various nodes in the AST\nwith information about where is a name defined, how many times is a name\nreferenced, if it is a global or not, if a function is using `eval` or the\n`with` statement etc.  I will discuss this some place else, for now what's\nimportant to know is that you need to call the following before doing\nanything with the tree:\n```javascript\ntoplevel.figure_out_scope()\n```\n\n#### Compression\n\nLike this:\n```javascript\nvar compressor = UglifyJS.Compressor(options);\nvar compressed_ast = toplevel.transform(compressor);\n```\n\nThe `options` can be missing.  Available options are discussed above in\n“Compressor options”.  Defaults should lead to best compression in most\nscripts.\n\nThe compressor is destructive, so don't rely that `toplevel` remains the\noriginal tree.\n\n#### Mangling\n\nAfter compression it is a good idea to call again `figure_out_scope` (since\nthe compressor might drop unused variables / unreachable code and this might\nchange the number of identifiers or their position).  Optionally, you can\ncall a trick that helps after Gzip (counting character frequency in\nnon-mangleable words).  Example:\n```javascript\ncompressed_ast.figure_out_scope();\ncompressed_ast.compute_char_frequency();\ncompressed_ast.mangle_names();\n```\n\n#### Generating output\n\nAST nodes have a `print` method that takes an output stream.  Essentially,\nto generate code you do this:\n```javascript\nvar stream = UglifyJS.OutputStream(options);\ncompressed_ast.print(stream);\nvar code = stream.toString(); // this is your minified code\n```\n\nor, for a shortcut you can do:\n```javascript\nvar code = compressed_ast.print_to_string(options);\n```\n\nAs usual, `options` is optional.  The output stream accepts a lot of otions,\nmost of them documented above in section “Beautifier options”.  The two\nwhich we care about here are `source_map` and `comments`.\n\n#### Keeping comments in the output\n\nIn order to keep certain comments in the output you need to pass the\n`comments` option.  Pass a RegExp or a function.  If you pass a RegExp, only\nthose comments whose body matches the regexp will be kept.  Note that body\nmeans without the initial `//` or `/*`.  If you pass a function, it will be\ncalled for every comment in the tree and will receive two arguments: the\nnode that the comment is attached to, and the comment token itself.\n\nThe comment token has these properties:\n\n- `type`: \"comment1\" for single-line comments or \"comment2\" for multi-line\n  comments\n- `value`: the comment body\n- `pos` and `endpos`: the start/end positions (zero-based indexes) in the\n  original code where this comment appears\n- `line` and `col`: the line and column where this comment appears in the\n  original code\n- `file` — the file name of the original file\n- `nlb` — true if there was a newline before this comment in the original\n  code, or if this comment contains a newline.\n\nYour function should return `true` to keep the comment, or a falsy value\notherwise.\n\n#### Generating a source mapping\n\nYou need to pass the `source_map` argument when calling `print`.  It needs\nto be a `SourceMap` object (which is a thin wrapper on top of the\n[source-map][source-map] library).\n\nExample:\n```javascript\nvar source_map = UglifyJS.SourceMap(source_map_options);\nvar stream = UglifyJS.OutputStream({\n\t...\n\tsource_map: source_map\n});\ncompressed_ast.print(stream);\n\nvar code = stream.toString();\nvar map = source_map.toString(); // json output for your source map\n```\n\nThe `source_map_options` (optional) can contain the following properties:\n\n- `file`: the name of the JavaScript output file that this mapping refers to\n- `root`: the `sourceRoot` property (see the [spec][sm-spec])\n- `orig`: the \"original source map\", handy when you compress generated JS\n  and want to map the minified output back to the original code where it\n  came from.  It can be simply a string in JSON, or a JSON object containing\n  the original source map.\n\n  [acorn]: https://github.com/marijnh/acorn\n  [source-map]: https://github.com/mozilla/source-map\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\n  [codegen]: http://lisperator.net/uglifyjs/codegen\n  [compressor]: http://lisperator.net/uglifyjs/compress\n",
   39    "readmeFilename": "README.md",
   40    "bugs": {

/Users/vashoka/code/sparkk/Rivendell/node_modules/jade/node_modules/with/node_modules/uglify-js/README.md:
  132  For example:
  133  
  134:     uglifyjs /home/doe/work/foo/src/js/file1.js \
  135:              /home/doe/work/foo/src/js/file2.js \
  136               -o foo.min.js \
  137               --source-map foo.min.js.map \

/Users/vashoka/code/sparkk/Rivendell/node_modules/less-middleware/node_modules/less/.idea/workspace.xml:
  199      <file path="$PROJECT_DIR$/../less-docs/content/usage/options.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1390124108773" ignored="false" />
  200      <file path="$PROJECT_DIR$/../less-docs/.jshintrc" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1388582909695" ignored="false" />
  201:     <file path="$PROJECT_DIR$/../less-docs/content/Home.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1389647014347" ignored="false" />
  202      <file path="$PROJECT_DIR$/../less-docs/content/usage/advanced-client-side.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1388582909696" ignored="false" />
  203      <file path="$PROJECT_DIR$/../less-docs/CONTRIBUTING.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1391717302488" ignored="false" />
  ...
  208      <file path="$PROJECT_DIR$/../less-docs/_gh_pages/assets/css/site.css" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1390677504951" ignored="false" />
  209      <file path="/nav-getting-started.hbs" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1388584268485" ignored="false" />
  210:     <file path="$PROJECT_DIR$/../less-docs/content/home/using.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1389652437402" ignored="false" />
  211      <file path="/using.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1389652437402" ignored="false" />
  212      <file path="/javascript.js" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1393275227762" ignored="false" />
  ...
  228      <file path="$PROJECT_DIR$/../less-docs/content/usage/sourcemaps.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1389646856788" ignored="false" />
  229      <file path="$PROJECT_DIR$/../less-docs/content/usage/plugins.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1389646866254" ignored="false" />
  230:     <file path="/Home.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1389647014347" ignored="false" />
  231      <file path="$PROJECT_DIR$/../less-docs/content/features/scope.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1389647274931" ignored="false" />
  232      <file path="/about.hbs" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1390646142138" ignored="false" />
  ...
  298      <file path="$PROJECT_DIR$/../less-docs/content/functions/default-function.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1390422872519" ignored="false" />
  299      <file path="$PROJECT_DIR$/../less-docs/node_modules/assemble-less/README.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1390668795283" ignored="false" />
  300:     <file path="$PROJECT_DIR$/../less-docs/content/home/using-less.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1391717302488" ignored="false" />
  301      <file path="/using-less.md" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1390646093543" ignored="false" />
  302      <file path="$PROJECT_DIR$/../less-docs/_gh_pages/feed.xml" changelist="50832ad7-0bb2-445d-8bdb-45c8a0f7f27b" time="1390647725749" ignored="false" />

/Users/vashoka/code/sparkk/Rivendell/node_modules/less-middleware/node_modules/less/node_modules/request/node_modules/http-signature/node_modules/assert-plus/package.json:
   14      "node": ">=0.6"
   15    },
   16:   "readme": "# node-assert-plus\n\nThis library is a super small wrapper over node's assert module that has two\nthings: (1) the ability to disable assertions with the environment variable\nNODE_NDEBUG, and (2) some API wrappers for argument testing.  Like\n`assert.string(myArg, 'myArg')`.  As a simple example, most of my code looks\nlike this:\n\n    var assert = require('assert-plus');\n\n    function fooAccount(options, callback) {\n\t    assert.object(options, 'options');\n\t\tassert.number(options.id, 'options.id);\n\t\tassert.bool(options.isManager, 'options.isManager');\n\t\tassert.string(options.name, 'options.name');\n\t\tassert.arrayOfString(options.email, 'options.email');\n\t\tassert.func(callback, 'callback');\n\n        // Do stuff\n\t\tcallback(null, {});\n    }\n\n# API\n\nAll methods that *aren't* part of node's core assert API are simply assumed to\ntake an argument, and then a string 'name' that's not a message; `AssertionError`\nwill be thrown if the assertion fails with a message like:\n\n    AssertionError: foo (string) is required\n\tat test (/home/mark/work/foo/foo.js:3:9)\n\tat Object.<anonymous> (/home/mark/work/foo/foo.js:15:1)\n\tat Module._compile (module.js:446:26)\n\tat Object..js (module.js:464:10)\n\tat Module.load (module.js:353:31)\n\tat Function._load (module.js:311:12)\n\tat Array.0 (module.js:484:10)\n\tat EventEmitter._tickCallback (node.js:190:38)\n\nfrom:\n\n    function test(foo) {\n\t    assert.string(foo, 'foo');\n    }\n\nThere you go.  You can check that arrays are of a homogenous type with `Arrayof$Type`:\n\n    function test(foo) {\n\t    assert.arrayOfString(foo, 'foo');\n    }\n\nYou can assert IFF an argument is not `undefined` (i.e., an optional arg):\n\n    assert.optionalString(foo, 'foo');\n\nLastly, you can opt-out of assertion checking altogether by setting the\nenvironment variable `NODE_NDEBUG=1`.  This is pseudo-useful if you have\nlots of assertions, and don't want to pay `typeof ()` taxes to v8 in\nproduction.\n\nThe complete list of APIs is:\n\n* assert.bool\n* assert.buffer\n* assert.func\n* assert.number\n* assert.object\n* assert.string\n* assert.arrayOfBool\n* assert.arrayOfFunc\n* assert.arrayOfNumber\n* assert.arrayOfObject\n* assert.arrayOfString\n* assert.optionalBool\n* assert.optionalBuffer\n* assert.optionalFunc\n* assert.optionalNumber\n* assert.optionalObject\n* assert.optionalString\n* assert.optionalArrayOfBool\n* assert.optionalArrayOfFunc\n* assert.optionalArrayOfNumber\n* assert.optionalArrayOfObject\n* assert.optionalArrayOfString\n* assert.AssertionError\n* assert.fail\n* assert.ok\n* assert.equal\n* assert.notEqual\n* assert.deepEqual\n* assert.notDeepEqual\n* assert.strictEqual\n* assert.notStrictEqual\n* assert.throws\n* assert.doesNotThrow\n* assert.ifError\n\n# Installation\n\n    npm install assert-plus\n\n## License\n\nThe MIT License (MIT)\nCopyright (c) 2012 Mark Cavage\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n## Bugs\n\nSee <https://github.com/mcavage/node-assert-plus/issues>.\n",
   17    "readmeFilename": "README.md",
   18    "_id": "assert-plus@0.1.2",

/Users/vashoka/code/sparkk/Rivendell/node_modules/less-middleware/node_modules/less/node_modules/request/node_modules/http-signature/node_modules/assert-plus/README.md:
   28  
   29      AssertionError: foo (string) is required
   30: 	at test (/home/mark/work/foo/foo.js:3:9)
   31: 	at Object.<anonymous> (/home/mark/work/foo/foo.js:15:1)
   32  	at Module._compile (module.js:446:26)
   33  	at Object..js (module.js:464:10)

/Users/vashoka/code/sparkk/Rivendell/node_modules/node-gcm-service/node_modules/request/node_modules/http-signature/node_modules/assert-plus/README.md:
   28  
   29      AssertionError: foo (string) is required
   30: 	at test (/home/mark/work/foo/foo.js:3:9)
   31: 	at Object.<anonymous> (/home/mark/work/foo/foo.js:15:1)
   32  	at Module._compile (module.js:446:26)
   33  	at Object..js (module.js:464:10)

/Users/vashoka/code/sparkk/Rivendell/node_modules/node-stringprep/node_modules/bindings/bindings.js:
  132   * containing the `package.json` file.
  133   *
  134:  *   In:  /home/nate/node-native-module/lib/index.js
  135:  *   Out: /home/nate/node-native-module
  136   */
  137  

/Users/vashoka/code/sparkk/Rivendell/node_modules/node-stringprep/node_modules/nan/build/config.gypi:
   32      "v8_no_strict_aliasing": 1,
   33      "v8_use_snapshot": "true",
   34:     "nodedir": "/home/rvagg/.node-gyp/0.10.21",
   35      "copy_dev_lib": "true",
   36      "standalone_static_library": 1

/Users/vashoka/code/sparkk/Rivendell/node_modules/scube/consumer-app/controllers/login/email-validation-controller.js:
   93  
   94        console.log("End of user Email Validation");
   95:       return res.redirect('/home');
   96      });
   97    }

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/index.js:
   50  
   51  app.get('/auth/facebook/callback', passport.authenticate('facebook', {
   52:   successRedirect : '/home',
   53    failureRedirect : '/login'
   54  }));
   ..
   58  
   59  app.get('/auth/google/callback', passport.authenticate('google', {
   60:   successRedirect : '/home',
   61    failureRedirect : '/login'
   62  }));
   ..
   69  // V1 implementation : Process the login form post request
   70  // app.post('/login', passport.authenticate('local-login', {
   71: //   successRedirect : '/home',
   72  //   failureRedirect : '/login',
   73  //   failureFlash : true
   ..
  108  
  109  /********************** profile *************************/
  110: app.get('/home', function(req, res) {
  111    namma_auth_obj.homeAction(req, res);
  112  });

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/namma-auth-action-route.js:
   53        if(req.query.consumer_app_data) {
   54          SCUBE_LOG.info("In Get Login Action redirecting to Home with app data");
   55:         res.redirect('/home?consumer_app_data='+req.query.consumer_app_data);
   56        } else {
   57          SCUBE_LOG.info("In Get Login Action redirecting to Home without app data");
   58:         res.redirect('/home');
   59        }
   60        return;

59 matches across 21 files


Searching 3359 files for "homeAction"

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/index.js:
  109  /********************** profile *************************/
  110  app.get('/home', function(req, res) {
  111:   namma_auth_obj.homeAction(req, res);
  112  });
  113  

/Users/vashoka/code/sparkk/Rivendell/routes/consumer-app/login/namma-auth-action-route.js:
  103    // Scube Ready : Show home page.
  104    // Reched here from passport login/signup success
  105:   this.homeAction = function(req, res) {
  106  
  107      // Used to store the device id for which the request is recvd

2 matches across 2 files


Searching 3359 files for "goToHomePageAfterAuth"

/Users/vashoka/code/sparkk/Rivendell/public/js/scube-signin.js:
  185                  if (data.result === "success" && typeof data.user !== 'undefined') {
  186                      if (typeof window.JsInterface !== 'undefined') {
  187:                         window.JsInterface.goToHomePageAfterAuth(data.user.user_id, data.user.email_id, "3");
  188                      } else {
  189                          // User logged in using non-app environment
  ...
  246                          // when we add a location selector in signup webview / when user updates profile
  247                          // Node needs to send new locationId to client device
  248:                         window.JsInterface.goToHomePageAfterAuth(data.user.user_id, data.user.email_id, "3");
  249                      } else {
  250                          // User logged in using non-app environment
  ...
  321              if (data.result === "success" && typeof data.userId !== 'undefined') {
  322                  if (typeof window.JsInterface !== 'undefined') {
  323:                     window.JsInterface.goToHomePageAfterAuth(data.userId, data.emailId, "3");
  324                  } else {
  325                      // User logged in using non-app environment

/Users/vashoka/code/sparkk/Rivendell/views/login-success.ejs:
   17        <script>
   18          if(typeof window.JsInterface !== 'undefined') {
   19:           window.JsInterface.goToHomePageAfterAuth("<%= userId %>", "<%= emailId %>", "3", socialType);
   20          } else {
   21            document.write('<div class="message"> ' + socialType + ' Successful from Non-App Environment</div>');

4 matches across 2 files
