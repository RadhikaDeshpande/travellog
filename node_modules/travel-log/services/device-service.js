var jsonUtil = require(DEFS.DIR.JSON_UTIL);

module.exports = function() {

  this.host = (DEFS.CONST.DOMAIN === DEFS.CONST.LOCALHOST) ? DEFS.CONST.LOCALHOST : DEFS.CONST.PRODUCTION;
  this.port = (process.env.OPENSHIFT_MYSQL_DB_HOST) ? '443' : '3000';

  this.getDeviceDefines = function(callback) {
    console.log("Service : Received device defines Service call request");
    var deviceDefines = new jsonUtil();
    var options = {
        host: this.host,
        port: this.port,   // use 443 for https else dont add this option in the list
        path: '/apis/device/defines',
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    };

    deviceDefines.getJSON(options, function(message, statusCode, data) {

      if(typeof data['error'] !== 'undefined') {
        // Device defines not retrieved
        console.log('Service : Device Defines API error message : '+ data['error']);
        callback('failure');
        return;
      }

      if(typeof data !== 'undefined') {
        callback(data);
        return;
      }

      callback('failure');
      return;
    });
  };

  this.getGcmInfo = function(deviceId, callback) {
    console.log("Service : received GCM info service call request");
    var gcmInfo = new jsonUtil();
    var options = {
        host: this.host,
        port: this.port,   // use 443 for https else dont add this option in the list
        path: '/apis/gcm/get?id='+deviceId,
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    };

    gcmInfo.getJSON(options, function(message, statusCode, data) {

      if(typeof data['error'] !== 'undefined') {
        // Device defines not retrieved
        console.log('Service : Get gcmInfo API error message : '+ data['error']);
        callback('failure');
        return;
      }

      if(typeof data !== 'undefined') {
        callback(data);
        return;
      }

      callback('failure');
      return;
    });
  };

  /*
  Usage : Refer - 
  https://github.com/sparkk/fellowship/wiki/GCM-%5B-Google-Cloud-Messaging-%5D
  testgcm.js example 
  */
  this.sendGcmMessage = function(deviceId, jsonStringData, callback) {
    console.log("Service : received GCM send message service call request");

    if(typeof deviceId === 'undefined' || typeof jsonStringData === 'undefined') {
      console.log("Service : No deviceId or json data provided for sending GCM message");
      callback('failure');
    }

    var gcmSend = new jsonUtil();

    if(!gcmSend.isJsonString(jsonStringData)) {
      console.log("Service : Invalid Json String provided for gcm message");
      callback('failure');
    }

    var options = {
        host: this.host,
        port: this.port,   // use 443 for https else dont add this option in the list
        path: '/apis/gcm/send?id='+deviceId+'&data='+jsonStringData,
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    };

    gcmSend.getJSON(options, function(message, statusCode, data) {

      if(typeof data['error'] !== 'undefined') {
        // Device defines not retrieved
        console.log("Service : Get gcmInfo API error message : "+ data['error']);
        callback('failure');
        return;
      }

      if(typeof data !== 'undefined') {
        SCUBE_LOG.info("GCM Send Meesage Status Code = "+statusCode);
        SCUBE_LOG.info(data);
        callback(data);
        return;
      }

      callback('failure');
      return;
    });
  };  

}
