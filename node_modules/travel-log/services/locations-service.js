var jsonutil = require(DEFS.DIR.JSON_UTIL);

module.exports = function() {

  this.host = (process.env.OPENSHIFT_MYSQL_DB_HOST) ? 'parkking-lotr.rhcloud.com' : 'localhost';
  this.port = (process.env.OPENSHIFT_MYSQL_DB_HOST) ? '443' : '3000';

  this.getLocations = function(callback) {
    var locationList = new jsonutil();
    var options = {
        host: this.host,
        port: this.port,   // use 443 for https else dont add this option in the list
        path: '/apis/locations',
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    };

    locationList.getJSON(options, function(message, statusCode, data) {

      if(typeof data['error'] !== 'undefined') {
        // Locations not retrieved
        console.log('Locations API error message : '+ data['error']);
        callback(false);
        return;
      }

      if(typeof data['locationList'] !== 'undefined') {
        console.log(data['locationList']);
        callback(data['locationList']);
        return;
      }

      console.log('Locations API error message : '+ data['result']);
      callback(false);
      return;
    });
  };

  this.getLocationId = function(location, callback) {
    
    console.log("DEBUG------> The location in services api call is "+location);
    location = location.replace(" ","%20");
    var locationId = new jsonutil();
    var options = {
        host: this.host,
        port: this.port,   // use 443 for https else dont add this option in the list
        path: '/apis/location/id?name='+location,
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    };

    locationId.getJSON(options, function(message, statusCode, data) {

      if(typeof data['error'] !== 'undefined') {
        // Locations not retrieved
        console.log('Locations API error message : '+ data['error']);
        callback(false);
        return;
      }

      if(typeof data['locationId'] !== 'undefined') {
        callback(data['locationId'][0]);
        return;
      }

      callback(false);
      return;
    });
  };
}
