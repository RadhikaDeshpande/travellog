//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// These APIs handle forgot password/reset password implementations

// Usage: 
// var passwordManagementApi = require(DEFS.DIR.LOGIN_API_PWD_MANAGEMENT);
// var pwdApi = new passwordManagementApi();
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var passwordManagement = function() {
  // Include mysql, sp
  var mysql   = require('mysql');
  var uuid    = require('node-uuid');
  var sp      = require(DEFS.DIR.DB_SP);
  var mailer  = require(DEFS.DIR.MAILER);

  var hasher  = require(DEFS.DIR.HASHER);
  
  // Connect to the database
  var dbConnect       = require(DEFS.DIR.DB_CONNECT)('openshift');
  var mongodb     = require('mongodb');
  var MongoClient = mongodb.MongoClient;

  /************************************************************************************
     Name       : resetPwdAction
     Invoked By : When user clicks forgot password link new_passowrd for resetting his password 
     Usage      : Updates the user pwd in db with new password provided
     Params     : req      = Request object
                  res      = Response object
  ************************************************************************************/

  this.resetPwdAction = function(req, res) {

    if(!req.body.password) {
      return res.send(JSON.stringify({result: 'failure', message: 'Invalid password provided'}));
    }

    var newPassword = req.body.password,
      userId = req.body.email_id,
      hash = new hasher(),
      hashedPassword = hash.createHashedPassword(newPassword);

      MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {

        dbConnectMongo = db; // Setting the global variable db handle
        var collection = dbConnectMongo.collection('user_login_table');
        collection.update({"_id":userId},{$set:{password:hashedPassword}}, function (err, result) {
          if(err) {
            console.log(err);
            return res.redirect('/home');
          } else {
            res.render('login-form.ejs', {
                message : "Password Successfully changed! "});
            return;
          }
        });
      }
    });
  }

  
  /************************************************************************************
     Name       : validateResetPwdLink
     Invoked By : When user clicks the resetPwdLink sent to him
     Usage      : Validates the reset pwd link, if valid, renders a form which accepts the new password.
                  If not valid, displays appropriate error message and redirects to a page with option to 
                  resend the validation link.
     Params     : req = Request object
                  res = Response object
     Notes      : 1) If we do not get the expected keywords in GET request, redirect user to login page 
                  with error (Encoding 21=u 19=s e=5 18=r; so a2119518 = a user)
  ************************************************************************************/
  this.validateResetPwdLink = function(req, res) {

    //Refer Notes 1
    if(!req.query.uuid || !req.query.a2119518 ) {
      console.log("validateResetPwdLink : Invalid values present in reset password link");
      return res.redirect('/login?form=fp');
    } 

    var userGivenUUID = req.query.uuid,
     userGivenUserId = req.query.a2119518;

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {

        dbConnectMongo = db; // Setting the global variable db handle
        var collection = dbConnectMongo.collection('user_login_table');

        collection.findOne({"_id": userGivenUserId}, function(err, doc) {
          if(!doc) { // entry not found  
            message = 'Wrong link provided! Please enter your email, we will resend the link';
            res.render('login-forgot-pwd.ejs', {
                message : message
            });
          } else {
            if(userGivenUUID == doc.pwdResetUuid) {
              message = 'Enter new password & Login'
              result = 'success';
              res.render('login-reset-pwd.ejs', {
                message : "Enter new password & Login",
                user_id : userGivenUserId
              });
            } else {
              message = 'Wrong link provided! Please enter your email, we will resend the link';
              res.render('login-forgot-pwd.ejs', {
                message : message
              });
            }
          }
        });
      }
    });
  }
  
  /************************************************************************************
     Name       : sendResetPwdMail
     Invoked By : When user submits(post) email id for forgotPwd 
     Usage      : Sends a mail to the users to reset their password 
     Params     : req      = Request object
                  res      = Response object
                  emailId  = Email id to send the mail to
  ************************************************************************************/
  this.sendResetPwdMail = function(req, res, emailId) {

    if(!emailId) {
      return res.send(JSON.stringify({result: 'failure', message: 'EmailId required to reset password. Try again'}));
    }

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {

        dbConnectMongo = db; // Setting the global variable db handle
        var collection = dbConnectMongo.collection('user_login_table');

        collection.findOne({"_id": emailId}, function(err, doc) {
          if(!doc) { // entry not found  
            return res.send(JSON.stringify({result: 'failure', message: 'User not found with the provided emailId. Please Try again'}));
          } else {
            var userId = emailId; 
            uuidToSend = uuid.v4();
            collection.update({"_id":emailId},{$set:{pwdResetUuid:uuidToSend}}, function (err, result) {
              if(err) {
                console.log(err);
                return res.redirect('/home');
              } else {
                // Now we send a mail to the user for validation
                //Since its forgot password scenario we wont have a session, so redirect to login page
                var mail          = new mailer();
                mail.sendResetPwdLink(uuidToSend, emailId, emailId);
                // Success notification to user
                return res.send(JSON.stringify({result: 'success', message: 'A email has been sent to you with instructions to update password'}));
              }
            });
          }
        });
      }
    });    
  }
};

module.exports = passwordManagement;
