//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// These APIs handle forgot password/reset password implementations

// Usage: 
// var passwordManagementApi = require(DEFS.DIR.LOGIN_API_PWD_MANAGEMENT);
// var pwdApi = new passwordManagementApi();
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var passwordManagement = function() {
  // Include mysql, sp
  var mysql   = require('mysql');
  var uuid    = require('node-uuid');
  var sp      = require(DEFS.DIR.DB_SP);
  var mailer  = require(DEFS.DIR.MAILER);

  var hasher  = require(DEFS.DIR.HASHER);
  
  // Connect to the database
  var dbConnect       = require(DEFS.DIR.DB_CONNECT)('openshift');
  
   /************************************************************************************
     Name       : changePwdAction
     Invoked By : When user submits(post) new_passowrd for changing his password 
     Usage      : Updates the user pwd in db with new password provided if the old_pwd
                  that the user gives matches with DB entry
     Params     : req      = Request object
                  res      = Response object
  ************************************************************************************/

  this.changePwdAction = function(req, res) {

    if(!req.body.oldPassword || !req.body.newPassword || !req.body.userEmail) {
      console.log("we have invalid values");
      req.flash('loginMessage', 'Ivalid Request');
      return res.redirect('/login');
    }

    console.log("Change Pwd Action Invoked");
    console.log(req.body);
    var oldPassword = req.body.oldPassword
    var newPassword = req.body.newPassword;
    var userId = req.body.userId;
    var userEmail = req.body.userEmail;

    var userGetPwd = new sp('usp_get_user_password');
    userGetPwd.add(userId,false);
    dbConnect.query(userGetPwd.call(), function(err,rows){
      if (err)
        return done(err);
        
        //This SP does not have any error checking return
        dbPwd = rows[0][0].password;
        var hash = new hasher();

        // Validate the password
        var isOldPwdValid = hash.validatePassword(oldPassword, dbPwd);
        console.log("Is password valid: " + isOldPwdValid);
        
        // Handle wrong email or password
        if(!isOldPwdValid) {
          req.flash('changePwdMessage', 'Old password does not match our records'); 
          return res.redirect('/changePwd');
        }
        
        var hashedNewPassword = hash.createHashedPassword(newPassword);

        spNewPassword = hashedNewPassword;

        var changePwd = new sp('usp_update_user_login');
        changePwd.add(userId,false);     // User ID
        changePwd.addNull(6);  //5elemenets should be null
        changePwd.add(spNewPassword,true);  // For change pwd last feild shd be used

        console.log(spNewPassword);
        dbConnect.query(changePwd.call(), function(err,rows) {
          if(err)
            return err;
            //Once we redirect to login it can go to login or
            // profile, so populating message for both
            if(req.session.passport.user) {
              req.flash('profileMessage', 'Password changed succesfully');
            } else {
              req.flash('loginMessage', 'Password changed succesfully');
            }
            return res.redirect('/login');
        });
   });
  }


  /************************************************************************************
     Name       : resetPwdAction
     Invoked By : When user clicks forgot password link new_passowrd for resetting his password 
     Usage      : Updates the user pwd in db with new password provided
     Params     : req      = Request object
                  res      = Response object
  ************************************************************************************/

  this.resetPwdAction = function(req, res) {

    if(!req.body.newPassword) {
      console.log("resetPwdAction : Invalid password provided");
      return res.send(JSON.stringify({result: 'failure', message: 'Invalid password provided'}));
    }

    // Should we validate user id again ????? Most likely not needed

    var newPassword = req.body.newPassword,
      userId = req.body.userId,
      hash = new hasher(),
      hashedPassword = hash.createHashedPassword(newPassword);

    spPassword = hashedPassword;

    var resetPwd = new sp('usp_update_user_login');
    resetPwd.add(userId,false);     // User ID
    resetPwd.add(spPassword,true);  // New Password
    resetPwd.addNull(6);  //6 elemenets should be null

    dbConnect.query(resetPwd.call(), function(err,rows) {
      if(err) {
        return res.send(JSON.stringify({result: 'failure', message: 'Failed to update password'}));
      }

      // This scenario occurs when user has already changed pwd using 
      // the link we sent, now he is trying to use the same link again
      if(rows[0][0].status == DEFS.CONST.DB_FORGOT_PWD_INVALID_LINK) {
        return res.send(JSON.stringify({result: 'failure', message: 'Invalid reset password link'}));
      } else if(rows[0][0].status == DEFS.CONST.DB_PWD_UPDATE_ACTION_SUCCESS){
        return res.send(JSON.stringify({result: 'success', message: 'Password reset successful'}));
      }
    }); 
  }

  
  /************************************************************************************
     Name       : validateResetPwdLink
     Invoked By : When user clicks the resetPwdLink sent to him
     Usage      : Validates the reset pwd link, if valid, renders a form which accepts the new password.
                  If not valid, displays appropriate error message and redirects to a page with option to 
                  resend the validation link.
     Params     : req = Request object
                  res = Response object
     Notes      : 1) If we do not get the expected keywords in GET request, redirect user to login page 
                  with error (Encoding 21=u 19=s e=5 18=r; so a2119518 = a user)
  ************************************************************************************/
  this.validateResetPwdLink = function(req, res) {

    //Refer Notes 1
    if(!req.query.uuid || !req.query.a2119518 ) {
      console.log("validateResetPwdLink : Invalid values present in reset password link");
      return res.redirect('/login?form=fp');
    }

    console.log("User data received in password reset link  : ", req.query.uuid, req.query.a2119518, req.query.user);

    var userGivenUUID = req.query.uuid,
      userGivenUserId = req.query.a2119518;

    // Query the db to know if the user is valid, uuid value and time are valid
    var verifyResetPwdUuid = new sp('usp_verify_reset_uuid');
    verifyResetPwdUuid.add(userGivenUserId, false);
    verifyResetPwdUuid.add(userGivenUUID,   true);
    dbConnect.query(verifyResetPwdUuid.call(), function(err,rows) {
      if (err) {
        console.log('verifyResetPwdUuid : DB error');
        return res.redirect('/login?form=fp');
      }

      console.log('Rows : ', rows[0][0].status, rows[0][0].reason);

      if(!rows[0][0].status || !rows[0][0].reason) {
        console.log("ERROR! SP call did not return row in Email Validation");
        return res.redirect('/login?form=fp');
      }

      var result = null,
        message = null;

      switch(rows[0][0].status) {
        case DEFS.CONST.DB_USER_LINK_SUCCESSFULLY_VALIDATED:
            console.log("Validation result: "+ rows[0][0].reason);
            if(req.session.passport.user) {
              req.session.passport.user.isEmailValidated = DEFS.CONST.SESSION_USER_VALIDATED;
            }
            console.log('resetPasswordMessage : ', 'Enter the new password');
            message = 'Enter new password & Login'
            result = 'success';
            break;

        case DEFS.CONST.INVALID_USER_IN_LINK_PROVIDED:
        case DEFS.CONST.DB_INVALID_UUID_IN_LINK_PROVIDED:
            console.log("Validation result: "+ rows[0][0].reason);
            console.log('forgotPwdMessage : ', 'Wrong link provided! Please enter your email, we will resend the link');

            message = 'Wrong link provided! Please enter your email, we will resend the link';
            res.redirect('/login?form=fp');
            break;

        case DEFS.CONST.DB_EXPIRED_UUID_IN_LINK_PROVIDED:
            console.log("Validation result: "+ rows[0][0].reason);
            console.log('forgotPwdMessage : ', 'Link Expired! Please enter your email, we will resend the link');

            message = 'Link Expired! Please enter your email, we will resend the link';
            res.redirect('/login?form=fp');
            break;

        default:
            //Invalid case  
            console.log("ERROR! SP call did not return proper row in Email Validation");
            console.log("Got status: " + rows[0][0].status + "got reason: " + rows[0][0].reason); 

            message = 'Wrong link provided! Please enter your email, we will resend the link';
            res.redirect('/login?form=fp');
            break;
      }

      res.render('reset-password.ejs', {userId: userGivenUserId, result: result, message: message});

      console.log("End of reset UUID validation");
    });
  }
  
  /************************************************************************************
     Name       : sendResetPwdMail
     Invoked By : When user submits(post) email id for forgotPwd 
     Usage      : Sends a mail to the users to reset their password 
     Params     : req      = Request object
                  res      = Response object
                  emailId  = Email id to send the mail to
  ************************************************************************************/
  this.sendResetPwdMail = function(req, res, emailId) {

    if(!emailId) {
      return res.send(JSON.stringify({result: 'failure', message: 'EmailId required to reset password. Try again'}));
    }

    // query the db to get user id from email id
    var getUserId = new sp('usp_get_userid');
    getUserId.add(emailId, true);
    dbConnect.query(getUserId.call(), function(err,rows) {
      if(err) {
        return res.send(JSON.stringify({result: 'failure', message: 'User not found with the provided emailId. Please Try again'}));
      }

      var userId = rows[0][0].user_id; 
      var userType = rows[0][0].user_type;

      if(!userId || userId == -1) {
        console.log("Invalid user obtained in sendResetPasswordMail");
        return res.send(JSON.stringify({result: 'failure', message: 'No records found with the provided emailId. Please try again'}));
      }

      //If user is not regular user, we should not give option to change password
      switch(userType) {
        case DEFS.CONST.USER_TYPE['regular']:
            //We can go ahead and change the password
            break;

        case DEFS.CONST.USER_TYPE['facebook']:
            return res.send(JSON.stringify({result: 'failure', message: 'Looks like you have used facebook to signup, please visit facebook.com to reset your passwrod'}));
            break;

        case DEFS.CONST.USER_TYPE['google+']:
            return res.send(JSON.stringify({result: 'failure', message: 'Looks like you have used google plus to signup, please visit google.com to reset your passwrod'}));
            break;

        case DEFS.CONST.USER_TYPE['twitter']:
            return res.send(JSON.stringify({result: 'failure', message: 'Looks like you have used twitter to signup, please visit twitter.com to reset your passwrod'}));
            break;

        default: //Ivalid case
            return res.send(JSON.stringify({result: 'failure', message: 'Something went wrong!. Please try again'}));
      }
            
      // Valid user id and email present; continue with sending mail
      console.log("userId: ", userId);
      // generate a UUID
      // UUID example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      uuidToSend = uuid.v4();
    
      // Store this UUID for that particular user
      var storeUUIDForUser = new sp('usp_update_user_login');
      storeUUIDForUser.add(userId,false);     // User ID
      storeUUIDForUser.addNull(4);     //4 columns are Null
      storeUUIDForUser.add(uuidToSend,true);  // Reset_UUID
      storeUUIDForUser.addNull(2);     // Social Token
      dbConnect.query(storeUUIDForUser.call(), function(err,rows) {
        if(err) {
          return res.send(JSON.stringify({result: 'failure', message: 'Something went wrong!. Please try again'}));
        }

        //Upon successfull update exactly one row should be affected
        if(rows.affectedRows !== DEFS.CONST.DB_NUM_AFFECTED_ROWS_IS_ONE) { //Error condition
          console.log("Error: DB not updated with uuid");
          return res.send(JSON.stringify({result: 'failure', message: 'Something went wrong!. Please try again'}));
        }

        // Now we send a mail to the user for validation
        //Since its forgot password scenario we wont have a sessio, so redirect to login page
        var mail          = new mailer();
        mail.sendResetPwdLink(uuidToSend, emailId, userId);

        // Success notification to user
        return res.send(JSON.stringify({result: 'success', message: 'A email has been sent to you with instructions to update password'}));
      });
    });
  }
};

module.exports = passwordManagement;
