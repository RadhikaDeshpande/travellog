
// These APIs handle user email validation 
// Usage: 
// var emailvalidationApi  = require(DEFS.DIR.LOGIN_API_EMAIL_VALIDATION);
// var valApi              = new emailvalidationApi();
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var userEmailValidation = function() {
   
  // Include mysql, sp
  var mysql   = require('mysql');
  var sp      = require(DEFS.DIR.DB_SP);
  var mailer  = require(DEFS.DIR.MAILER);
  var uuid    = require('node-uuid');

  var mongodb     = require('mongodb');
  var MongoClient = mongodb.MongoClient;

  /***********************************************************************************
    Name       : validateUserEmailValidationLink
    Invoked By : When user clicks on the email validation link
    Usage      : Validates the link, if valid, changes the user status in DB. If not valid,
                 displays appropriate error message and redirects to a page with option to 
                 resend the validation link. 
    Params     : req  = Request object
                 res  = Response object
    Notes      : 1) If we do not get the expected keywords in GET reuqest, redirect him to login page 
                 with error (Encoding 21=u 19=s e=5 18=r; so a2119518 = a user)
  ************************************************************************************/
  this.validateUserEmailValidationLink = function(req, res) {

    //Refer notes 1
    if(!req.query.uuid || !req.query.a2119518) {
      console.log("we have invalid values");
      req.flash('revalidateEmailMessage', 'Wrong link provided!');
      return res.redirect('/resendUserValidateEmail');
    }

    var userGivenUUID   = req.query.uuid;
    var userGivenUserId = req.query.a2119518;

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {

        dbConnectMongo = db; // Setting the global variable db handle
        var collection = dbConnectMongo.collection('user_login_table');

        collection.findOne({"_id": userGivenUserId}, function(err, doc) {
          if(!doc) { // entry not found  
            message = 'Wrong link provided!';
                res.render('login-resend-email-validation.ejs', {
                message : message
              });
              return;

          } else {
            // Validate the uuid from looking up the db  
            if(doc.emailUuid == userGivenUUID) { // Change the flag in db upon validation
              collection.update({"_id":userGivenUserId},{$set:{isEmailValidated:true}}, function (err, result) {
                if(err){
                  message = 'Opps something went wrong';
                  res.render('login-resend-email-validation.ejs', {
                  message : message
                });
                return;
                }
              });    
              message = 'Congrats! Your account has been successfully validated. Please login to continue';
                res.render('login-form.ejs', {
                message : message
              });
              return;
            } else {
              message = 'Wrong link provided!';
                res.render('login-resend-email-validation.ejs', {
                message : message
              });
              return;
            }
          }
        });
      }
    });
  }
    

  /************************************************************************************
     Name       : sendEmailForValidation
     Invoked By : When user signup takes place or when he rquests to resend the link
     Usage      : Sends an email with a link to validate the user email address. 
     Params     : req           = Request object
                  res           = Response object
                  emailId       = Email id to send the mail to
                  firstOrResend = Indicates whether it is at the time of signup or user 
                                  is requesting to resend the email validation link
                  uuidToSend    = At the time of signup UUID is generated. 
                  userId        = At the time of signup userId is known and is passed to 
                                  this function
  ************************************************************************************/
  this.sendEmailForValidation = function(req, res, emailId, firstOrResend, uuidToSend, userId) {
    if (firstOrResend == 'resendValidation') {
      console.log('User requested to resend the activation link');
    } else {
      console.log('User signed up , sending validation email');
    }

    if(!emailId) {
      console.log("Error! No valid email id found");
      return;
    }
    
    //Function invoked from signup; Send mail and exit 
    if(firstOrResend == "firstValidation") {

      var mail          = new mailer();
      mail.sendUserEmailValidationLink(uuidToSend, emailId, userId);
      return {message: 'A validation email has been sent to your account'};

    } else {

        MongoClient.connect(connection_string, function (err, db) {
          if(err) {
            console.log('Unable to connect to the mongoDB server. Error:' + err);
          } else {

            dbConnectMongo = db; // Setting the global variable db handle
            var collection = dbConnectMongo.collection('user_login_table');

            collection.findOne({"_id": emailId}, function(err, doc) {
              if(!doc) { // entry not found  
                return res.send({result: 'failure', message: 'No user found for provided email. Please try again'});
              } else {

                uuidToSend = doc.emailUuid;
                // Now we send a mail to the user for validation
                var mail  = new mailer();
                mail.sendUserEmailValidationLink(uuidToSend, emailId, emailId);
                  if(req.session.passport.user) {
                    return res.send(JSON.stringify({result: 'success', message: 'User found. A validation email has been sent to your account'}));
                  } else {
                    return res.send(JSON.stringify({result: 'success', message: 'A validation email has been sent to your account'}));
                  }
                }
              });  
            }
          });
      }
  }
}
  
module.exports = userEmailValidation;

