//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// These APIs handle user email validation 
// Usage: 
// var emailvalidationApi  = require(DEFS.DIR.LOGIN_API_EMAIL_VALIDATION);
// var valApi              = new emailvalidationApi();
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var userEmailValidation = function() {
   
  // Include mysql, sp
  var mysql   = require('mysql');
  var sp      = require(DEFS.DIR.DB_SP);
  var mailer  = require(DEFS.DIR.MAILER);
  var uuid    = require('node-uuid');

  // Connect to the database
  var dbConnect = require(DEFS.DIR.DB_CONNECT)('openshift');

  
  /***********************************************************************************
    Name       : validateUserEmailValidationLink
    Invoked By : When user clicks on the email validation link
    Usage      : Validates the link, if valid, changes the user status in DB. If not valid,
                 displays appropriate error message and redirects to a page with option to 
                 resend the validation link. 
    Params     : req  = Request object
                 res  = Response object
    Notes      : 1) If we do not get the expected keywords in GET reuqest, redirect him to login page 
                 with error (Encoding 21=u 19=s e=5 18=r; so a2119518 = a user)
  ************************************************************************************/
  this.validateUserEmailValidationLink = function(req, res) {

    //Refer notes 1
    if(!req.query.uuid || !req.query.a2119518) {
      console.log("we have invalid values");
      req.flash('revalidateEmailMessage', 'Wrong link provided!');
      return res.redirect('/resendUserValidateEmail');
    }

    console.log(req.query.uuid);
    console.log(req.query.a2119518);
    var userGivenUUID   = req.query.uuid;
    var userGivenUserId = req.query.a2119518;

    // Validate the uuid and userid
    var verifySignupUuid = new sp('usp_verify_signup_uuid');
    verifySignupUuid.add(userGivenUserId, false);
    verifySignupUuid.add(userGivenUUID,   true);

    dbConnect.query(verifySignupUuid.call(), function(err,rows) {
      if (err)
          return err;
      console.log('rows');
      console.log(rows[0][0].status);
      console.log(rows[0][0].reason);
      if(!rows[0][0].status || !rows[0][0].reason) {
        console.log("ERROR! SP call did not return row in Email Validation");
        return;
      }

      switch(rows[0][0].status) {
        case DEFS.CONST.DB_USER_SUCCESSFULLY_VALIDATED:
             console.log("Validation result: "+ rows[0][0].reason);
             if(req.session.passport.user) {
              req.session.passport.user.isEmailValidated = DEFS.CONST.SESSION_USER_VALIDATED;
              req.flash('profileMessage', 'Congrats! Your account has been successfully validated.');
             } else {
                req.flash('loginMessage', 'Congrats! Your account has been successfully validated.');
             }
             break;

        case DEFS.CONST.DB_USER_ALREADY_VALIDATED:
             console.log("Validation result: "+ rows[0][0].reason);
             break;

        case DEFS.CONST.INVALID_USER_IN_LINK_PROVIDED:
        case DEFS.CONST.DB_INVALID_UUID_IN_LINK_PROVIDED:
             console.log("Validation result: "+ rows[0][0].reason);
             req.flash('revalidateEmailMessage', 'Wrong link provided!');
             return res.redirect('/resendUserValidateEmail');

        case DEFS.CONST.DB_EXPIRED_UUID_IN_LINK_PROVIDED:
             console.log("Validation result: "+ rows[0][0].reason);
             req.flash('revalidateEmailMessage', 'link that is provided is expried!');
             return res.redirect('/resendUserValidateEmail');

        default:
              //Ivalid case  
             console.log("ERROR! SP call did not return proper row in Email Validation");
             console.log("Got status: " + rows[0][0].status + "got reason: " + rows[0][0].reason); 
             req.flash('revalidateEmailMessage', 'Wrong link provided!');
             return res.redirect('/resendUserValidateEmail');
      }

      console.log("End of user Email Validation");
      return res.redirect('/home');
    });
  }

  /************************************************************************************
     Name       : sendEmailForValidation
     Invoked By : When user signup takes place or when he rquests to resend the link
     Usage      : Sends an email with a link to validate the user email address. 
     Params     : req           = Request object
                  res           = Response object
                  emailId       = Email id to send the mail to
                  firstOrResend = Indicates whether it is at the time of signup or user 
                                  is requesting to resend the email validation link
                  uuidToSend    = At the time of signup UUID is generated. 
                  userId        = At the time of signup userId is known and is passed to 
                                  this function
     Notes      : 1) If the request is a resend validation link req, delete the 
                     previous verify uuid entry of that user and create a new one and 
                     then send mail.
  ************************************************************************************/
  this.sendEmailForValidation = function(req, res, emailId, firstOrResend, uuidToSend, userId) {
    if (firstOrResend == 'resendValidation') {
      console.log('User requested to resend the activation link');
    } else {
      console.log('User signed up , sending validation email');
    }

    if(!emailId) {
      console.log("Error! No valid email id found");
      return;
    }
    
    //Function invoked from signup; Send mail and exit 
    if(firstOrResend == "firstValidation") {

      var mail          = new mailer();
      mail.sendUserEmailValidationLink(uuidToSend, emailId, userId);
      return {message: 'A validation email has been sent to your account'};

    } else {

      //Function invoked by user to resend the link
      //query the db to get user id from email id
      var getUserId = new sp('usp_get_userid');
      getUserId.add(emailId, true);
      dbConnect.query(getUserId.call(), function(err,rows) {
        if(err) {
          return res.send(JSON.stringify({result: 'failure', message: 'Scube user for email not found'}));
        }

        var userId = rows[0][0].user_id,
          userStatus = rows[0][0].user_status;

        if(!userId || userId === DEFS.CONST.DB_INVALID_USER_IN_LINK_PROVIDED) {
          console.log("Invalid user obtained in sendEmailForValidation");

          return res.send({result: 'failure', message: 'No user found for provided email. Please try again'});
        }

        console.log("userId:", userId);

        // Valid user id and email present; continue with sending mail
        //Check if user is already validated via passowrd reset 
        //If he is validated we redirect based on session
        if(userStatus === DEFS.CONST.DB_USER_ALREADY_VALIDATED && req.session.passport.user) {
          return res.send({result: 'success', message: 'Your email is already validated'});
        }
        
        //Refer Notes 1
        uuidToSend = uuid.v4();
        
        // Update DB with new UUID
        var storeUUIDForUser = new sp('usp_update_user_login');
        storeUUIDForUser.add(userId,false);     // User ID
        storeUUIDForUser.addNull(3);     
        storeUUIDForUser.add(uuidToSend,true);  // Verify UUID
        storeUUIDForUser.addNull(3);     

        dbConnect.query(storeUUIDForUser.call(), function(err,rows) {
          if(err) {
            return res.send(JSON.stringify({result: 'failure', message: 'Update user data failed'}));
          }

          //Upon successfull update exactly one row should be affected
          if(rows.affectedRows !== DEFS.CONST.DB_NUM_AFFECTED_ROWS_IS_ONE) { //Error condition
            return res.send(JSON.stringify({result: 'failure', message: 'Could not update data for scube user'}));
          }

          // Now we send a mail to the user for validation
          var mail  = new mailer();
          mail.sendUserEmailValidationLink(uuidToSend, emailId, userId);
          if(req.session.passport.user) {
            return res.send(JSON.stringify({result: 'success', message: 'User found. A validation email has been sent to your account'}));
          } else {
            return res.send(JSON.stringify({result: 'success', message: 'A validation email has been sent to your account'}));
          }
        });
      });
    }
  }
};

module.exports = userEmailValidation;
