// Define Facebook & Google+ Passport
var fbStrategy      = require('passport-facebook').Strategy;
var googleStrategy  = require('passport-google-oauth').OAuth2Strategy;
var socialConfig    = require(DEFS.DIR.SOCIAL_CONFIG); // Load the social config

// These values are set when the get request for /signup is received. 
// Client ID and Secret for facebook/google+ APP are determined based on user domain
// localhost/dev : sparkk
// Prd           : parkking
var fbConfig        = null;
var googleConfig    = null;

// External Libraries
var uuid            = require('node-uuid');

// Connect to the database
var dbConnect       = require(DEFS.DIR.DB_CONNECT)('openshift');
var sp              = require(DEFS.DIR.DB_SP);

// Scube Libraries
var jsonUtil           = require(DEFS.DIR.JSON_UTIL);
var hasher             = require(DEFS.DIR.HASHER);
var servicesLocation   = require(DEFS.DIR.SERVICES_LOCATION);
servicesLocation       = new servicesLocation();

var socialAuth = function(passport) {
  // ====================================
  // Passport session setup
  // (Handling persistent login sessions)
  // ====================================

  // Used to serialize the user for the session
  passport.serializeUser(function(user, done) {
    console.log("Serializing User : "+user.user_id);
    done(null, user);
  });

  // Used to deserialize the user
  passport.deserializeUser(function(id, done) {
    var user = {};
    user.user_id = id;

    console.log("Deserializing User : "+id);
    done(null, user);
  });

  // =======================
  // Facebook  and G+ SIGNUP HELPERS
  // =======================
  var addGender = function(userSignupSp, profile) {
    // =========== Add GENDER ===========
    if(typeof profile._json.gender !== 'undefined') {
      spGender = profile._json.gender;
      userSignupSp.add(DEFS.CONST.GENDER[spGender], false);
    } else {
      // If profile has no gender information. Set it to 'none'.
      userSignupSp.add(gender['none'], false);
      console.log('Gender not found in profile. Adding "none" to signup request');
    }
  };

  var addDob = function(userSignupSp, profile, socialType, done) {
    // =========== ADD DOB ===========
    if(socialType === 'facebook' && typeof profile._json.birthday !== 'undefined') {
      // Convert FB:mm/dd/yyyy to Scube:yyyy/mm/dd
      date = profile._json.birthday.split("/");
      spDob = date[2]+'/'+date[0]+'/'+date[1];
      userSignupSp.add(spDob, true);
    } else if(socialType === 'google+' && typeof profile._json.me.ageRange !== 'undefined') {
      // Google+ does not provide date of birth. Make use of age Range and compute 'year/1/1'
      console.log("DEBUG----> The google+ profile is:");
      console.log(profile._json.me.ageRange);

      date = new Date();
      year = date.getFullYear() - profile._json.me.ageRange['min'];
      spDob = year+'/1/1';
      userSignupSp.add(spDob, true);
    } else {
      console.log('Birthday not found');
      userSignupSp.addNull(1); // If B'day not found we need not bail out
    }
  };

  // For updating user profile 
  var addProfilePic = function(updateUserProfile, profile, socialType, done) {
    var foundFlag = 0; 
    // =========== ADD DOB ===========
    if(socialType === 'facebook' && typeof profile._json.id !== 'undefined') {
      // To form the fb image url, we need fb id in json
      var UrlArr = DEFS.CONST.FACEBOOK_PROFILE_PIC_URL.split("$");
      var Url  = UrlArr[0] + profile._json.id + UrlArr[1];
      updateUserProfile.add(Url, true);
      foundFlag = 1;
    } else if(socialType === 'google+' && typeof profile._json.picture !== 'undefined') {
      var Url = profile._json.picture;
      updateUserProfile.add(Url, true);
    } else {
      if(socialType === 'facebook' && !foundFlag) {
        console.log('Facebook Id not found'); // Display Error, we need to find fbid
        return done();
      }
    }
  };

  // For updating user profile 
  var addUserFirstName = function(updateUserProfile, profile, socialType, done) {
    // =========== ADD DOB ===========
    if(socialType === 'facebook' && typeof profile._json.first_name !== 'undefined') {
      updateUserProfile.add(profile._json.first_name, true);
    } else if(socialType === 'google+' && typeof profile._json.given_name !== 'undefined' ) {
      updateUserProfile.add(profile._json.given_name, true);
    } else {
      updateUserProfile.addNull(1);
    }
  };

    // For updating user profile 
  var addUserLastName = function(updateUserProfile, profile, socialType, done) {
    // =========== ADD DOB ===========
    if(socialType === 'facebook' && typeof profile._json.last_name !== 'undefined') {
      updateUserProfile.add(profile._json.last_name, true);
    } else if(socialType === 'google+' && typeof profile._json.family_name !== 'undefined') {
      updateUserProfile.add(profile._json.family_name, true);
    } else {
      updateUserProfile.addNull(1);
    }
  };

  var addLocation = function(userSignupSp, profile, socialType, done, callback) {
    // =========== Add LOCATION ===========
    if(socialType === 'facebook' && typeof profile._json.location !== 'undefined') {
      spLocation = profile._json.location['name'];
      spLocation = spLocation.split(",");

      // This check causes FB login to break. Not sure why we needed this check, so commenting for now
      // if(spLocation.length !== 2) {
      //   return done();
      // }

      // Convert location name to be all lowercase 
      // Use the first part (city) from the location string sent by facebook
      spLocation = spLocation[0].toLowerCase();

    } else if(socialType === 'google+') {

      if(typeof profile._json.me.placesLived !== 'undefined' && profile._json.me.placesLived.length > 0 && typeof profile._json.me.placesLived[0]['value'] !== 'undefined') {
        // format : placesLived: [ { value: 'hyderabad', primary: true } ]
        primaryLocation = profile._json.me.placesLived[0]['value'];
      } else {
        primaryLocation = 'others';  
      }

      // Use the first place from the places lived list of the user
      spLocation = primaryLocation.charAt(0).toUpperCase() + primaryLocation.slice(1).toLowerCase();
    } else {
      console.log('Location not found'); // If no valid location is obtained
      spLocation = "others";
    }

    // Make a service call to get the location ID
    servicesLocation.getLocationId(spLocation, function(result) {
      // Service call failed
      if(!result) {
        console.log('getLocationId Service call failed');
        return done();
      } else {
        userSignupSp.add(result['location_id'], false);
        // Continue signup sp call
        callback();
      }
    });
  };

  var addCredentials = function(userSignupSp, profile, done) {
    // =========== Add USERNAME : User email ===========
    if(typeof profile._json.email !== 'undefined') {
      spUsername = profile._json.email;
      userSignupSp.add(spUsername, true);
    } else {
      console.log('Email not found');
      return done();
    }

    // =========== ADD PASSWORD : User Profile ID ===========
    if(typeof profile._json.id !== 'undefined') {
      // Hash the user ID and save it as password
      var hash = new hasher();
      var spPassword = hash.createHashedPassword(profile._json.id);
      userSignupSp.add(spPassword, true);
    } else {
      console.log('Profile id not found');
      return done();
    }
  };

  var socialSignup = function(profile, longLivedToken, socialType, done) {
    // Create SignUp SP instance
    var userSignupSp = new sp('usp_user_signup');
    console.log("User Profile @socialSignup function: ")
    console.log(profile);
    // Fill in the data required by sp to signup the user
    addGender(userSignupSp, profile);
    addDob(userSignupSp, profile, socialType, done);
    // Add location ID : wait for location api to fetch the id before proceeding further
    addLocation(userSignupSp, profile, socialType, done, function() {

      addCredentials(userSignupSp, profile, done);

      // For social signup UUID is not needed
      userSignupSp.addNull(1);

      // Type of User
      spUserType = DEFS.CONST.USER_TYPE[socialType];
      userSignupSp.add(spUserType, false);

      // Social token. long-lived-token in case of social signup
      spSocialToken = longLivedToken;
      userSignupSp.add(spSocialToken, true);

      var spGetDeviceIdByImei = new sp('usp_get_device_id_by_imei');
      spGetDeviceIdByImei.add(DEFS.CONST.SOCIAL_SIGNUP_USER_TEMP_IMEI_NUMBER,false);
      dbConnect.query(spGetDeviceIdByImei.call(), function(err, rows) {
        if(err) {
          console.log("Social auth signup fatal error, usp_get_device_id_by_imei");
          return done();
        } 
        
        userSignupSp.add(rows[0][0].device_id,false);

        // Invoke mysql SP for signup request
        dbConnect.query(userSignupSp.call(), function(err,rows) {
          if (err) {
            console.log("User signup failed with error : "+err);
            return done(err);
          }

          // Handle error during signup
          if(rows[0][0].user_id == -1) {
            console.log("User signup failed with user id = -1");
            return done(err);
          }

          var newUser = {};
          newUser.user_id = rows[0][0].user_id;
          newUser.email_id = profile._json.email;
          console.log('New '+socialType+' user successfully signed up with id :'+newUser.user_id+' with profile = '+profile._json);
          
          // Now update the user profile with available user profile information 
          var updateUserProfile = new sp('usp_update_user_profile');
          updateUserProfile.add(newUser.user_id, false);
          addUserFirstName(updateUserProfile, profile, socialType, done); 
          addUserLastName(updateUserProfile, profile, socialType, done); 
          updateUserProfile.addNull(4);
          addProfilePic(updateUserProfile, profile, socialType, done);
          updateUserProfile.addNull(1);

          dbConnect.query(updateUserProfile.call(), function(err,rows) {
            if (err) {
              console.log("User Update profile failed with error : "+err);
              return done(err);
            }
            // User successfully signed up
            return done(null, newUser);
          });
        });
      });
    });
  };


  // ========================= G+ Helpers =============================================
  /* Fetch the debug info associated with a access_token by sending a get request to G+.
   * token : user token that should be debugged. 
   *
   * output : returns the json response sent by G+. 
   * If token is valid, response will be as follows
   * 
   *  {
        issued_to: "684967223858-t2kltjr979b9fph63vt912ea1u0gdcnb.apps.googleusercontent.com",
        audience: "684967223858-t2kltjr979b9fph63vt912ea1u0gdcnb.apps.googleusercontent.com",
        user_id: "115719752185896341669",
        scope: "https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/plus.login",
        expires_in: 3078,
        email: "vishak.parkking@gmail.com",
        verified_email: true,
        access_type: "online"
      }
   *
   * If token is invalid, response will be a json with 'error' field as follows
   *
   *  {
        error: "invalid_token",
        error_description: "Invalid Value",
        debug_info: "code: INVALID_VALUE http status: 400 arguments: [invalid_token]
      }
   */
  var debugGPlusToken = function(socialToken, callback) {
    // GET request format : GET /debug_token?input_token={user-token}&access_token={app_id|app_secret}
    var gPlusDebugTokenRequest = new jsonUtil();
    var options = {
        host: 'www.googleapis.com',
        port: 443,   // use 443 for https else dont add this option in the list
        path: '/oauth2/v1/tokeninfo?'+socialToken,
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    };

    gPlusDebugTokenRequest.getJSON(options, function(message, statusCode, data) {

      if(typeof data['error'] !== 'undefined' && data['error'] === 'invalid_token') {
        // Token is invalid
        console.log('Token debug error message : '+ data['error_description']);
        callback(false);
        return;
      }

      if(typeof data['audience'] !== 'undefined' && data['audience'] === googleConfig.clientID) {
        callback(true);
        return;
      }

      callback(false);
      return;
    });
  };

  // ========================= FB Helpers =============================================
  /* Fetch the debug info associated with a access_token by sending a get request to FB.
   * token : user token that should be debugged. Can be a short lived or long lived token 
   *
   * output : returns the json response sent by FB. 
   * If token is valid, response will be as follows
   * 
   *  {
        data: {
          app_id: "794979310541826"
          is_valid: true
          application: "Sparkk"
          user_id: "1478422099063031"
          issued_at: 1406951511
          expires_at: 1412135511
          scopes: [4]
          0:  "public_profile"
          1:  "email"
          2:  "user_birthday"
          3:  "user_location"
        }
      }
   *
   * If token is invalid, response will be a json with 'error' field as follows
   *
   *  {
        "error": {
          "message": "Error validating access token: Session has expired at unix 
                      time SOME_TIME. The current unix time is SOME_TIME.", 
          "type": "OAuthException", 
          "code": 190
        }
      }
   */ 
  var debugFBToken = function(socialToken, callback) {
    // GET request format : GET /debug_token?input_token={user-token}&access_token={app_id|app_secret}
    var fbDebugTokenRequest = new jsonUtil();
    var options = {
        host: 'graph.facebook.com',
        port: 443,   // use 443 for https else dont add this option in the list
        path: '/debug_token?input_token='+socialToken+'&access_token='+fbConfig.clientID+'|'+fbConfig.clientSecret,
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    };

    fbDebugTokenRequest.getJSON(options, function(message, statusCode, data) {
      if(typeof data['data'] == 'undefined' || typeof data['data']['is_valid'] == 'undefined' || !data['data']['is_valid']) {
        if(typeof data['data']['error']['message'] !== 'undefined') {
          console.log('Token debug error message : '+ data['data']['error']['message']);
        }

        callback(false);
        return;
      }

      // Check for valid flag
      if(data['data']['is_valid']) {
        callback(true);
        return;
      }

      callback(false);
      return;
    });
  };

  var convertToLongLivedToken = function(token, callback) {
    // Create json util object
    var fbLongLivedTokenRequest = new jsonUtil();

    // Make a fb get request to obtain long-lived-token (ttl=60 days) by passing short-lived-token (ttl=2hours)
    var options = {
        host: 'graph.facebook.com',
        port: 443,   // use 443 for https else dont add this option in the list
        path: '/oauth/access_token?grant_type=fb_exchange_token&client_id='+fbConfig.clientID+'&client_secret='+fbConfig.clientSecret+'&fb_exchange_token='+token,
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    };

    fbLongLivedTokenRequest.getJSON(options, function(message, statusCode, data) {
      console.log("Long lived token received from fb with statusCode : "+statusCode);
      
      // If response was Success (code:200), then build sp and send to db
      if(statusCode == 200 && typeof data['result'] !== undefined) {
        // fetch long-lived token from result string : format - "access_token=jhgkjsxavfvxhbjxhrf....expires=6452424"
        var longLivedToken = data['result'].split('=');
        
        console.log("longLivedToken = "+longLivedToken);

        if(typeof longLivedToken[1] === 'undefined') {
          callback('');
          return
        }

        callback(longLivedToken[1]);
        return;
      }

      callback('');
      return;
    });
  };

  // Make a google + request to fetch the user me data
  var getMe = function(access_token, callback) {
    // Create json util object
    var gPlusProfileRequest = new jsonUtil();

    var options = {
        host: 'www.googleapis.com',
        port: 443,   // use 443 for https else dont add this option in the list
        path: '/plus/v1/people/me?access_token='+access_token,
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    }

    gPlusProfileRequest.getJSON(options, function(message, statusCode, data) {
      if(statusCode == 200) {
        callback(data);
      } else {
        callback(null);
      }
    });
  }

  var updateSocialToken = function(userId, longLivedToken, callback) {
    var updateSocialTokenSp = new sp('usp_update_user_login');
    updateSocialTokenSp.add(userId, false);
    // not updating the next 6 fields
    updateSocialTokenSp.add("null", false);
    updateSocialTokenSp.add("null", false);
    updateSocialTokenSp.add("null", false);
    updateSocialTokenSp.add("null", false);
    updateSocialTokenSp.add("null", false);
    updateSocialTokenSp.add("null", false);

    // new social_token
    updateSocialTokenSp.add(longLivedToken, true);

    dbConnect.query(updateSocialTokenSp.call(), function(err, rows) {
      if(err) {
        callback(false);
        return;
      }

      if(rows) {
        console.log('updateSocialToken: Update successful');
        callback(true);
        return;
      }
    });
  };

  var fetchSocialToken = function(userId, callback) {
    var fetchSocialTokenSp = new sp('usp_get_social_token');
    fetchSocialTokenSp.add(userId, false);

    dbConnect.query(fetchSocialTokenSp.call(), function(err, rows) {
      // rows[0] value example format
      // [ { social_token: '<social-token>&expires' } ]
      if(err || typeof rows[0][0]['social_token'] == 'undefined') callback('');

      console.log('fetchSocialToken resp : '+rows[0][0]['social_token']);
      callback(rows[0][0]['social_token']);
      return;
    });
  };

  var getAndValidateSocialToken = function(userId, callback, socialType) {
    // Fetch social token from db
    fetchSocialToken(userId, function(token) {
      // Check for validity by sending debug request to FB/G+
      if(socialType === "facebook") {
        debugFBToken(token, function(result) {
          if(result) {
            console.log('Facebook Social Token is valid. return "valid"');
            callback('valid');
          } else {
            console.log('Facebook Social Token is invalid. return "invalid"');
            callback('invalid');
          }
        });
      } else if(socialType === "google+") {
        debugGPlusToken(token, function(result) {
          if(result) {
            console.log('G+ Social Token is valid. return "valid"');
            callback('valid');
          } else {
            console.log('G+ Social Token is invalid. return "invalid"');
            callback('invalid');
          }
        });
      }
    });
  };

  // ================
  // Facebook AUTH ==
  // ================
  this.createFbStrategy = function(socialConfig) {
    // Save the config
    fbConfig = socialConfig;
    
    passport.use(new fbStrategy(fbConfig,

      // After authentication, facebook returns short-lived-token and user profile
      function(token, refreshToken, profile, done) {
        // Sample facebook response values
        // =========== TOKEN ===========
        // CAALTB4tonAIBAAlZBd9ZB3P4Onyew3qhTMxG8efFPREMicYJGuPgZAfZCdndnrwDEdg3wCZB
        // HMiDYYEMppsMkZAG8QiVYEphsZBkgvihKs8cF3zLxevVw20BrHbuWr4891OdnNXlrW7eDFCoQp
        // A8ofyoNyEZBvV10EmEZBlxwrS7yZCyiSzIAp2uRlcU0eG2j1PXraXp36g7HGegPHEgeo9GNQ
        // =========== PROFILE ===========
        //     {
        //       "id": "1478422099063031",
        //       "displayName": "Vishak Nag",
        //       "name": {
        //         "familyName": "Nag",
        //         "givenName": "Vishak"
        //       },
        //       "gender": "male",
        //       "profileUrl": "https://www.facebook.com/app_scoped_user_id/1478422099063031/",
        //       "emails": [
        //         {
        //           "value": "vishak.parkking@gmail.com"
        //         }
        //       ],
        //       "provider": "facebook",
        //       "_raw": "{\"id\":\"1478422099063031\",\"email\":\"vishak.parkking\\u0040gmail.com\",\"first_name\":\"Vishak\",\"gender\":\"male\",\"last_name\":\"Nag\",\"link\":\"https:\\/\\/www.facebook.com\\/app_scoped_user_id\\/1478422099063031\\/\",\"locale\":\"en_US\",\"name\":\"Vishak Nag\",\"timezone\":-7,\"updated_time\":\"2014-07-20T16:31:04+0000\",\"verified\":true}",
        //       "_json": {
        //         "id": "1478422099063031",
        //         "birthday": "06/24/1987",
        //         "email": "vishak.parkking@gmail.com",
        //         "first_name": "Vishak",
        //         "gender": "male",
        //         "last_name": "Nag",
        //         "link": "https://www.facebook.com/app_scoped_user_id/1478422099063031/",
        //         "location": { id: '115200305158163', name: 'Hyderabad, Andhra Pradesh' },
        //         "locale": "en_US",
        //         "name": "Vishak Nag",
        //         "timezone": -7,
        //         "updated_time": "2014-07-20T16:31:04+0000",
        //         "verified": true
        //       }
        //     }
        //   =================================

        // Asynchronous handling by switching the main thread to 
        // handle the event loop before moving forward
        process.nextTick(function() {
          // Check if social user already exists using email ID
          if(typeof profile._json.email === 'undefined') {
            return done();
          }
          console.log("At CreateFbStrategy, user profile : ");    
-         console.log(profile);
          // Login SP
          var userLoginSp = new sp('usp_user_auth');
          var spEmail = profile._json.email;
          userLoginSp.add(spEmail, true);
          userLoginSp.add(DEFS.CONST.USER_TYPE['facebook'], false);


          var spGetDeviceIdByImei = new sp('usp_get_device_id_by_imei');
          spGetDeviceIdByImei.add(DEFS.CONST.SOCIAL_SIGNUP_USER_TEMP_IMEI_NUMBER,false);
          dbConnect.query(spGetDeviceIdByImei.call(), function(err, rows) {
            if(err) {
              console.log("Social auth signup fatal error, usp_get_device_id_by_imei");
              return done();
            } 

            userLoginSp.add(rows[0][0].device_id,false);

            dbConnect.query(userLoginSp.call(), function(err, rows) {
              if (err)
                return done(err);

              var dbResponse = rows[0][0];
              var hash = new hasher();

              // HANDLE DB RESPONSE

              // Facebook social user not found in DB
              if(dbResponse.password === DEFS.CONST.SP_USER_AUTH_INVALID_PASSWORD || dbResponse.user_id === DEFS.CONST.SP_USER_AUTH_INVALID_USER_ID) {

                // Check if user exists with a different user type
                if(dbResponse.status === DEFS.CONST.SP_USER_AUTH_STATUS_ACCOUNT_EXISTS_FOR_DIFFERENT_USER_TYPE) {
                  console.log("User Account already exists with a different user type");
                  return done(err, false);
                } else {
                  convertToLongLivedToken(token, function(longLivedToken) {
                    if(longLivedToken === '') {
                      console.log('Long lived token not found in FB response');
                    }

                    // User sign up
                    console.log("User not found in DB. Signing up");
                    socialSignup(profile, longLivedToken, 'facebook', done);
                  });
                }
              } else {
                // User in db can reach this point in two scenarios
                // 1> User logged out of facebook. Now he is logging in again
                // 2> User token expired, so we redirected him to authenticate again via facebook.
                //    Now we have a new token, update social_token field in db

                var sessionUser = {};
                sessionUser.user_id = dbResponse.user_id;
                sessionUser.email_id = profile._json.email;
                sessionUser.social_type = "fb";
                console.log('Facebook Logged in user ID is:'+sessionUser.user_id+' email is:'+sessionUser.email_id);

                // Fetch social from logged in user's db entry
                fetchSocialToken(dbResponse.user_id, function(dbToken) {

                  // Convert the received short lived token to long lived token to compare with db token
                  convertToLongLivedToken(token, function(longLivedToken) {
                    if(longLivedToken === '') {
                      console.log('Long lived token not found in FB response');
                      return done(err);
                    }

                    // If received fb token is different from dbToken then update the dbToken with it
                    if(dbToken !== longLivedToken) {
                      console.log('Updating dbToken with new one scenario = '+token);

                      updateSocialToken(dbResponse.user_id, longLivedToken, function(status) {
                        if(!status) console.log('Unable to update token in db');

                        return done(null, sessionUser);
                      });

                    } else {
                      console.log('User logging in scenario, no need to update token');

                      // Validate hashed-user-profile-id-password
                      if(typeof profile._json.id === 'undefined') {
                        return done();
                      }

                      var isValidPassword = hash.validatePassword(profile._json.id, dbResponse.password);
                      console.log("Password valid : "+isValidPassword);
                      
                      // Handle wrong email or password
                      if(!isValidPassword) {
                        return done(null, false, req.flash('socialLoginMessage', 'Facebook user found in DB with email address '+profile._json.email+' but with different social profile ID'));
                      }

                      // After user is successfully logged in
                      // fetch social token from db and verify its validity.
                      getAndValidateSocialToken(dbResponse.user_id, function(isValid) {
                        if(isValid == 'valid') {
                          // All is well. User exists in db and token is still valid
                          console.log('All is well. G+ user exists in db and token is still valid');
                          return done(null, sessionUser);
                        } else {
                          // User exists in db, but token is invalid
                          console.log('G+ user exists in db, but token is invalid');
                          return done(err);
                        }
                      }, "facebook"); //getAndValidateSocialToken
                    }
                  });     // convertToLongLivedToken
                });
              }           // else : user exists in db
            });           // dbConnect
          });            // Db Get Device Id using Imei
        });             // process.tick
    }));                // FB strategy
  }

  // ================
  // Google AUTH ====
  // ================
  this.createGoogleStrategy = function(socialConfig) {
    // Save the config
    googleConfig = socialConfig;

    passport.use(new googleStrategy(googleConfig,

      function(token, refreshToken, profile, done) {
        // Sample google+ response values
        // =========== PROFILE ===========
        // { provider: 'google',
        //   id: '115719752185896341669',
        //   _json: {
        //     id: '115719752185896341669',
        //     email: 'vishak.parkking@gmail.com',
        //     verified_email: true,
        //     name: 'Vishak Nag Ashoka',
        //     given_name: 'Vishak Nag',
        //     family_name: 'Ashoka',
        //     link: 'https://plus.google.com/115719752185896341669',
        //     picture: 'https://lh4.googleusercontent.com/-qqftY-xrYPw/AAAAAAAAAAI/AAAAAAAAAEY/Tt-9tkGIrN4/photo.jpg',
        //     gender: 'male',
        //     locale: 'en' 
        //   } 
        // }

        // =========== TOKEN ===========
        // ya29.XQANQFsp03gUkE8AAABbRuJUpmTnljKX9DuJ8_rhvsUqgIu5WLXu10JsMl16iaCXy7Fr8xCUsF5l80yuoOTNZnwr9XdlkW3X83KMYBvEEkIb62Rf7r1WpETeK0GaaA

        // =========== Google+ 'me' data ===========
        // {
        //   kind: 'plus#person',
        //   etag: '"AtDvFRdo1nr9guODqwfbgdIwgiE/NUiakv7KJSzr6TqywLFElD6v2vE"',
        //   gender: 'male',
        //   emails: [ { value: 'vishak.parkking@gmail.com', type: 'account' } ],
        //   objectType: 'person',
        //   id: '115719752185896341669',
        //   displayName: 'Vishak Nag Ashoka',
        //   name: { familyName: 'Ashoka', givenName: 'Vishak Nag' },
        //   url: 'https://plus.google.com/115719752185896341669',
        //   image: 
        //     { 
        //       url: 'https://lh4.googleusercontent.com/-qqftY-xrYPw/AAAAAAAAAAI/AAAAAAAAAEY/Tt-9tkGIrN4/photo.jpg?sz=50',
        //       isDefault: false 
        //     },
        //   placesLived: [ { value: 'hyderabad', primary: true } ],
        //   isPlusUser: true,
        //   language: 'en',
        //   ageRange: { min: 21 },
        //   circledByCount: 0,
        //   verified: false 
        // }
        // =================================

        process.nextTick(function() {
          // Check if social user exists using email ID
          if(typeof profile._json.email === 'undefined') {
            return done(null, false, {message: 'email not found in social site database'});
          }
          
          console.log("At createGoogleStrategy, user profile : ");    
-         console.log(profile);

          // Login SP : Check if user exists
          var userLoginSp = new sp('usp_user_auth');
          var spEmail = profile._json.email;
          userLoginSp.add(spEmail, true);
          userLoginSp.add(DEFS.CONST.USER_TYPE['google+'], false);

          var spGetDeviceIdByImei = new sp('usp_get_device_id_by_imei');
          spGetDeviceIdByImei.add(DEFS.CONST.SOCIAL_SIGNUP_USER_TEMP_IMEI_NUMBER,false);
          dbConnect.query(spGetDeviceIdByImei.call(), function(err, rows) {
            if(err) {
              console.log("Social auth signup fatal error, usp_get_device_id_by_imei");
              return done(err);
            }
            userLoginSp.add(rows[0][0].device_id,false);

            dbConnect.query(userLoginSp.call(), function(err, rows) {
              if (err) {
                console.log("User signup failed with error : "+err);
                return done(err);
              }

              // Fetch userID and password from login db response
              var dbResponse  = rows[0][0];
              var hash        = new hasher();

              // HANDLE DB RESPONSE

              // Google+ social user not found in DB
              if(dbResponse.password === DEFS.CONST.SP_USER_AUTH_INVALID_PASSWORD || dbResponse.user_id === DEFS.CONST.SP_USER_AUTH_INVALID_USER_ID) {

                // Check if user exists with a different user type
                if(dbResponse.status === DEFS.CONST.SP_USER_AUTH_STATUS_ACCOUNT_EXISTS_FOR_DIFFERENT_USER_TYPE) {
                  console.log("User Account already exists with a different user type");
                  return done(err);
                } else {
                  // Get detailed user profile information
                  var meData = getMe(token, function(meData) {
                    if(meData === null) {
                      return done(err);
                    }

                    // Append google+ 'me' data to profile
                    profile._json['me'] = meData;

                    // User sign up
                    console.log("User not found in DB. Signing up new google+ user");
                    socialSignup(profile, token, 'google+', done);
                  });
                }
              } else {
                // User in db can reach this point in two scenarios
                // 1> User logged out of google+. Now he is logging in again
                // 2> User token expired, so we redirected him to authenticate again via google+.
                //    Now we have a new token, update social_token field in db

                var sessionUser = {};
                sessionUser.user_id = dbResponse.user_id;
                sessionUser.email_id = profile._json.email;
                sessionUser.social_type = "google";
                console.log('Google+ Logged in user ID is:'+sessionUser.user_id+' email is:'+sessionUser.email_id);

                // Fetch social from logged in user's db entry
                fetchSocialToken(dbResponse.user_id, function(dbToken) {
                  // If received fb token is different from dbToken then update the dbToken with it
                  if(dbToken !== token) {
                    console.log('Updating dbToken with new one scenario = '+token);

                    updateSocialToken(dbResponse.user_id, token, function(status) {
                      if(!status) console.log('Unable to update token in db');

                      return done(null, sessionUser);
                    });

                  } else {
                    console.log('User logging in scenario, no need to update token');

                    // Validate hashed-user-profile-id-password
                    if(typeof profile._json.id === 'undefined') {
                      return done(err);
                    }

                    var isValidPassword = hash.validatePassword(profile._json.id, dbResponse.password);
                    console.log("Password valid : "+isValidPassword);

                    // Handle wrong email or password
                    if(!isValidPassword) {
                      return done(null, false, req.flash('socialLoginMessage', 'Google+ user found in DB but with email address '+profile._json.email+' a different social profile ID'));
                    }

                    // After user is successfully logged in
                    // fetch social token from db and verify its validity.
                    getAndValidateSocialToken(dbResponse.user_id, function(isValid) {
                      if(isValid == 'valid') {
                        // All is well. User exists in db and token is still valid
                        console.log('All is well. G+ user exists in db and token is still valid');
                        return done(null, sessionUser);
                      } else {
                        // User exists in db, but token is invalid
                        console.log('G+ user exists in db, but token is invalid');

                        // This will redirect user to /login [failureRedirect]
                        return done(err, false);
                      }
                    }, "google+"); //getAndValidateSocialToken
                  }
                });
              } // social user found in db
            }); // dbConnect login sp
          });
        });   // process.tick
      }
    ))
  }           // createGoogleStrategy
}

module.exports = socialAuth;
