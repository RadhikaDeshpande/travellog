//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// For Login and signup
// Usage: 
// var namma_auth          = require(DEFS.DIR.C_LOGIN_NAMMA_AUTH);
// namma_auth_obj          = new namma_auth();
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var nammaAuthController = function() {

// Scube Libraries
var hasher      = require(DEFS.DIR.HASHER);
var mongodb     = require('mongodb');
var MongoClient = mongodb.MongoClient;

  this.nammaSignupPostAction = function(req, res) {

    //Structure which contains user details after the signup
    var newUser = {};
    var userEmail;
    var userPassword;
    var userName;
    // signup post request received
    if(req.session.user){
      console.log(req.session.user)
    } else {
      console.log("no session")
    }
    
    signUpData = req.body;
    console.log(signUpData);

    // Add EMAIL
    if(typeof signUpData.email !== 'undefined') {
      userEmail = signUpData.email;
    } else {
      // Invalid email handling
      console.log("Signup email error");
      res.render('signup-form.ejs', {
                          message : "email not present in the signupData"});
      return;
    }

    // Add Username
    if(typeof signUpData.firstName !== 'undefined') {
      userName = signUpData.firstName;
    } else {
      console.log("Signup first name error");
      res.render('signup-form.ejs', {
                          message : "firstName not present in the signupData"});
      return;
    }

    // ADD PASSWORD
    if(typeof signUpData.password !== 'undefined') {
      // Hash the user's password
      var hash = new hasher();
      var hashedPassword = hash.createHashedPassword(signUpData.password);
      userPassword = hashedPassword;
    } else {
      // Invalid password handling
      console.log("Signup pwd  error");
      res.render('signup-form.ejs', {
                          message : "password not present in the signupData"});
      return;
    }

    // create a new UUID for sending email validation 
    var uuid = require('node-uuid');
    userVerifyUuid = uuid.v4();

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
        res.render('signup-form.ejs', {
                          message : "Unable to connect to the mongoDB server"});
        return;
      } else {
        //console.log('Configuring travel log with '+dbServer+' database at IP : '+config.host+' Port : '+config.port);
        dbConnectMongo = db; // Setting the global variable db handle
        var login_tbl   = dbConnectMongo.collection('user_login_table');
        var profile_tbl = dbConnectMongo.collection('user_profile_table');

        login_tbl.findOne({"_id": userEmail}, function(err, doc) {

          if(!doc) { // entry not found new user 
            login_tbl.insert( { "_id": userEmail ,password:userPassword , emailUuid: userVerifyUuid, userName : userName, isEmailValidated:false } );
            profile_tbl.insert( { "_id": userEmail ,totalBlogCount:0 });  
            //Populating passport session 
            newUser.user_id         = userEmail;
            newUser.user_name        = userName;

            var emailValidationController = require(DEFS.DIR.C_LOGIN_EMAIL_VALIDATION),
            emailValidationControllerObj = new emailValidationController(),
            retMessage = emailValidationControllerObj.sendEmailForValidation(req, "", userEmail, "firstValidation", userVerifyUuid, userEmail);

            console.log('sendEmailForValidation response : ', retMessage);

            req.session.user = newUser;
            // User successfully signed up
            req.session.message = "You have successfully signed up for travel logging";

            res.redirect('/profile');
            return;

          } else {
              console.log("email already in use, redirect to signup");
              res.render('signup-form.ejs', {
                          message : "Email provided is already in use"});
              return;
          }
        });
      }
    });
  } // end of signup action


  // =========================================================================
  // LOCAL LOGIN =============================================================
  // =========================================================================
  this.nammaLoginPostAction = function(req, res) {
    //Structure to hold the user data once he logins successfully
    var loggedInUser = {};

    loginData = req.body;

    MongoClient.connect(connection_string, function (err, db) {

      if(err) {
        res.render('login-form.ejs', {
                message : "cannot connect to db"});
        return;
      } else {

        dbConnectMongo = db; // Setting the global variable db handle
        var collection = dbConnectMongo.collection('user_login_table');

        collection.findOne({"_id": loginData.email}, function(err, doc) {
          if(!doc) { // entry not found  

            res.render('login-form.ejs', {
                message : "Email or Password does not match our records"});
            return;

          } else {
            // Validate the pwd 
            console.log(doc); // User details
            var hash = new hasher();
            var isValidPassword = hash.validatePassword(loginData.password, doc.password);
            console.log("Is password valid: "+isValidPassword);

            // Send error message, no session variables are saved
            if(!isValidPassword) {
              res.render('login-form.ejs', {
                message : "Email or Password does not match our records"});
              return;
            }

            if(doc.isEmailValidated) {
              loggedInUser.isEmailValidated = true;
            }


            loggedInUser.user_name   = doc.userName; 
            loggedInUser.user_id    = loginData.email;

            req.session.user = loggedInUser;
            req.session.message = "You have successfully logged in  for travel log";

            res.redirect('/profile');
            return;
          }
        });
      }
    });
  }
  
  // (TBD) Get the details of the user 
  function getUserProfile (loggedInUserId) {
    
  }
}
module.exports = nammaAuthController;
