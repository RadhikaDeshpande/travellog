// Define Local Passport Strategy
var LocalStrategy   = require('passport-local').Strategy;

var dbConnect   = require(DEFS.DIR.DB_CONNECT)('openshift');
var sp          = require(DEFS.DIR.DB_SP);

var userProfileUpdateHelper     = require(DEFS.DIR.API_HELPER_USER_PROFILE_UPDATE),
    userProfileUpdateHelperObj  = new userProfileUpdateHelper();

// Scube Libraries
var hasher      =   require(DEFS.DIR.HASHER);
var mongodb     = require('mongodb');
var MongoClient = mongodb.MongoClient;

module.exports  = function(passport) {
  // ====================================
  // Passport session setup
  // (Handling persistent login sessions)
  // ====================================

  // Used to serialize the user for the session
  passport.serializeUser(function(user, done) {
    console.log("Serializing User : "+ user.user_id);
    done(null, user);
  });

  // Used to deserialize the user
  passport.deserializeUser(function(id, done) {
    var user = {};
    user.user_id = id;

    console.log("Deserializing User : "+id.id);
    done(null, user);
  });

  // ================
  // Local SignUp ===
  // ================
  passport.use('local-signup', new LocalStrategy({
    usernameField : 'email',
    passwordField : 'password',
    passReqToCallback : true // allows us to pass back the entire request to the callback
  },
  function(req, email, password, done) {

    //Structure which contains user details, 
    //the array elemets are copied into passport
    //session
    var newUser = {};
    // signup post request received
    signUpData = req.body;

    console.log(signUpData);

    // Add EMAIL
    if(typeof signUpData.email !== 'undefined') {
      userEmail = signUpData.email;
      // TODO
    } else {
      // Invalid email handling
      return done(null, false, {message: 'Invalid email provided ' + signUpData.email});
    }

    // Add Username
    if(typeof signUpData.firstName !== 'undefined') {
      userName = signUpData.firstName;
      // TODO
    } else {
      // Invalid email handling
      return done(null, false, {message: 'Invalid username provided ' + signUpData.firstName});
    }

    // ADD PASSWORD
    if(typeof signUpData.password !== 'undefined') {
      // Hash the user's password
      var hash = new hasher();
      var hashedPassword = hash.createHashedPassword(signUpData.password);
      userPassword = hashedPassword;
    } else {
      // Invalid password handling
      return done(null, false, {message: 'Password should be atleast 6 chars and must contain atleast one digit'});
    }

    // create a new UUID for sending email validation 
    var uuid = require('node-uuid');
    userVerifyUuid = uuid.v4();

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {
        //console.log('Configuring travel log with '+dbServer+' database at IP : '+config.host+' Port : '+config.port);
        dbConnectMongo = db; // Setting the global variable db handle
        var login_tbl   = dbConnectMongo.collection('user_login_table');
        var profile_tbl = dbConnectMongo.collection('user_profile_table');

        login_tbl.findOne({"_id": userEmail}, function(err, doc) {

          if(!doc) { // entry not found new user 
            login_tbl.insert( { "_id": userEmail ,password:userPassword , emailUuid: userVerifyUuid, userName : userName, isEmailValidated:false } );
            profile_tbl.insert( { "_id": userEmail ,totalBlogCount:0 });  
            //Populating passport session 
            newUser.email_id         = userEmail;
            newUser.isEmailValidated = DEFS.CONST.SESSION_USER_NOT_VALIDATED;
            newUser.isNammaUser      = DEFS.CONST.SESSION_NAMMA_USER;
            newUser.user_name        = userName;

            var emailValidationController = require(DEFS.DIR.C_LOGIN_EMAIL_VALIDATION),
            emailValidationControllerObj = new emailValidationController(),
            retMessage = emailValidationControllerObj.sendEmailForValidation(req, "", userEmail, "firstValidation", userVerifyUuid, userEmail);

            console.log('sendEmailForValidation response : ', retMessage);

            // User successfully signed up
            return done(null, newUser, {message: 'Welcome! Traveller.'});

          } else {
            return done(null, false, {message: 'Email is already used'});
          }
        });
        return;
      }
    });
  }));

  // =========================================================================
  // LOCAL LOGIN =============================================================
  // =========================================================================
  passport.use('local-login', new LocalStrategy({
    // by default, local strategy uses email and password, we will override with email
    usernameField : 'email',
    passwordField : 'password',
    passReqToCallback : true // allows us to pass back the entire request to the callback
  },
  function(req, email, password, done) { // callback with email and password from our form

    //Structure to hold the user data once he logins successfully
    var loggedInUser = {};

    loginData = req.body;

    MongoClient.connect(connection_string, function (err, db) {

      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {

        dbConnectMongo = db; // Setting the global variable db handle
        var collection = dbConnectMongo.collection('user_login_table');

        collection.findOne({"_id": email}, function(err, doc) {
          if(!doc) { // entry not found  
          
            return done(null, false, {message: 'Email or Password provided is wrong'});

          } else {
            
            // Validate the pwd 
            console.log(doc);

            var hash = new hasher();
            var isValidPassword = hash.validatePassword(password, doc.password);
            console.log("Is password valid: "+isValidPassword);
             // Handle wrong email or password
            // Send error message, no session variables are saved
            if(!isValidPassword) {
              return done(null, false, {message: 'The Email or Password provided is wrong.'});
            }
 
            if(doc.isEmailValidated) {
              loggedInUser.isEmailValidated = true;
            }

            console.log('User Login Success for user:'+doc.userName+'. email : '+email+'. isNammaUser : '+loggedInUser.isNammaUser);

            loggedInUser.user_name   = doc.userName; 
            loggedInUser.email_id    = email;
            loggedInUser.isNammaUser = DEFS.CONST.SESSION_NAMMA_USER;
                  // Successfully logged in
            //return done(null, loggedInUser, {message: 'Welcome '+email});
            console.log("DONE");
            return done(null, loggedInUser);
          }
        });
      }
    });
  }));
  
  // (TBD) Get the details of the user 
  function getUserProfile (loggedInUserId) {
    var getUserProfileSp = new sp('usp_get_user_profile');
    getUserProfileSp.add(loggedInUserId, false);
    dbConnect.query(getUserProfileSp.call(), function(err,rows){
      if(err)
        return err;
      console.log(rows);
      return rows[0];
    }); 
  }
};
