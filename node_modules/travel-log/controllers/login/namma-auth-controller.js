// Define Local Passport Strategy
var LocalStrategy   = require('passport-local').Strategy;

var dbConnect   = require(DEFS.DIR.DB_CONNECT)('openshift');
var sp          = require(DEFS.DIR.DB_SP);

var userProfileUpdateHelper     = require(DEFS.DIR.API_HELPER_USER_PROFILE_UPDATE),
    userProfileUpdateHelperObj  = new userProfileUpdateHelper();

// Scube Libraries
var hasher      =   require(DEFS.DIR.HASHER);

module.exports = function(passport) {
  // ====================================
  // Passport session setup
  // (Handling persistent login sessions)
  // ====================================

  // Used to serialize the user for the session
  passport.serializeUser(function(user, done) {
    console.log("Serializing User : "+ user.user_id);
    done(null, user);
  });

  // Used to deserialize the user
  passport.deserializeUser(function(id, done) {
    var user = {};
    user.user_id = id;

    console.log("Deserializing User : "+id.id);
    done(null, user);
  });

  // ================
  // Local SignUp ===
  // ================
  passport.use('local-signup', new LocalStrategy({
    usernameField : 'email',
    passwordField : 'password',
    passReqToCallback : true // allows us to pass back the entire request to the callback
  },
  function(req, email, password, done) {

    //Structure which contains user details, 
    //the array elemets are copied into passport
    //session
    var newUser = {},
      deviceId,
      userSignupSp = new sp('usp_user_signup'); // Create SignUp SP instance

    // signup post request received
    signUpData = req.body;

    /*  POST json received from /signup form
      {
        email: 'vishaknag@gmail.com',
        password: 'hello14',
        gender: 'male',
        firstName: 'vishak',
        location: '3',
        deviceId: '79'
      }
    */
    // Data validation before sending data to mysql

    // Add GENDER
    if(typeof signUpData.gender !== 'undefined') {
      spGender = signUpData.gender;
      userSignupSp.add(DEFS.CONST.GENDER[spGender], false);
    } else {
      // invalid gender handling
      return done(null, false, {message: 'Invalid gender provided ' + signUpData.gender});
    }

    // ADD DOB
    // if(typeof signUpData.day !== 'undefined' && typeof signUpData.month !== 'undefined' && typeof signUpData.year !== 'undefined') {
    //   spDob = signUpData.year+"-"+signUpData.month+"-"+signUpData.day;
    //   // TODO
    //   // valid dob
    //   // min age 12

    //   userSignupSp.add(spDob, true);
    // } else {
    //   // invalid dob handling
    //   return done(null, false, req.flash('signupMessage', 'Invalid date of birth'), req.flash('deviceId', deviceId));
    // }
    // Phase 1 : DOB is depricated during signup
    userSignupSp.addOrAddNull(null, true);

    // Add LOCATION
    if(typeof signUpData.location !== 'undefined') {
      spLocation = signUpData.location;
      // TODO
      // not null

      userSignupSp.add(spLocation, false);
    } else {
      // Invalid location handling
      return done(null, false, {message: 'Invalid location provided ' + signUpData.location});
    }

    // Add EMAIL
    if(typeof signUpData.email !== 'undefined') {
      spEmail = signUpData.email;
      // TODO
      // valid email format

      userSignupSp.add(spEmail, true);
    } else {
      // Invalid username handling
      return done(null, false, {message: 'Invalid email provided ' + signUpData.email});
    }

    // ADD PASSWORD
    if(typeof signUpData.password !== 'undefined') {
      // TODO
      // min length : 6
      // atleast one number
      // Hash the user's password
      var hash = new hasher();
      var hashedPassword = hash.createHashedPassword(signUpData.password);
      spPassword = hashedPassword;
      
      userSignupSp.add(spPassword, true);
    } else {
      // Invalid password handling
      return done(null, false, {message: 'Password should be atleast 6 chars and must contain atleast one digit'});
    }

    // create a new UUID
    var uuid = require('node-uuid');
    spVerify = uuid.v4();
    userSignupSp.add(spVerify, true);

    // Regular User - 1
    userSignupSp.add(DEFS.CONST.USER_TYPE['regular'], false);

    //Social token is applicable only to Social Signup
    spSocialToken = "Not-Applicable";
    userSignupSp.add(spSocialToken, true);

    if(typeof signUpData.deviceId !== 'undefined') {
      deviceId = signUpData.deviceId;
      userSignupSp.add(deviceId, false);
    } else {
      // Invalid device Id
      return done(null, false, {message: 'Invalid Device Id Recieved. Please restart your app'});
    }

    // Invoke mysql SP for signup request
    dbConnect.query(userSignupSp.call(), function(err,rows) {
      if (err || !rows) {
        SCUBE_LOG.error('Signup SP DB Err For '+spEmail+' Err: '+err);
        return done(null, false, {message: 'Oops!! Something went wrong. Try again'});
      }

      if(rows[0][0].user_id === DEFS.CONST.DB_USER_EMAIL_ALREADY_EXISTS) {

        SCUBE_LOG.info('signup- User email already exists '+err+' DB Rows '+rows);
        return done(null, false, {message: 'Email is already used'});
      } else {
        
        //Populating user status upon sucessfull signup
        newUser.user_id          = rows[0][0].user_id;
        newUser.email_id         = spEmail;
        newUser.isEmailValidated = DEFS.CONST.SESSION_USER_NOT_VALIDATED;
        newUser.isNammaUser      = DEFS.CONST.SESSION_NAMMA_USER;
        newUser.deviceId         = deviceId;

        SCUBE_LOG.info('New user signup id : '+newUser.user_id+ ' Username '+spEmail);

        // After successful signup, update profile to send firstName (nickname) to db
        // Add Nickname entered by user as 'firstName'
        var userProfileArr = {};
        userProfileArr.user_id = newUser.user_id;
        userProfileArr.first_name = signUpData.firstName;
        userProfileArr.last_name = null;
        userProfileArr.gender = null;
        userProfileArr.date_of_birth = null;
        userProfileArr.location = null;
        userProfileArr.phone_num = null;
        userProfileArr.image_url = null;
        userProfileArr.qb_user_id = null;
        userProfileUpdateHelperObj.update(userProfileArr, function(returnMsg, returnData) {
          if(returnMsg === 'success') {
            SCUBE_LOG.info("Successfully updated 'firstName(nickname)' "+signUpData.firstName+" for the signed up user");
            // Signup + FirstNameprofile update successful; send for email validation
            var emailValidationController = require(DEFS.DIR.C_LOGIN_EMAIL_VALIDATION),
              emailValidationControllerObj = new emailValidationController(),
              retMessage = emailValidationControllerObj.sendEmailForValidation(req, "", spEmail, "firstValidation", spVerify, newUser.user_id);

            console.log('sendEmailForValidation response : ', retMessage);

            // User successfully signed up
            return done(null, newUser, {message: 'Welcome! Scuber. Socialize Shop & Save'});
          } else {
            // Invalid firstName handling
            return done(null, false, {message: 'Invalid firstName provided ' + signUpData.firstName});
          }
        });
      }
    });
  }));

  // =========================================================================
  // LOCAL LOGIN =============================================================
  // =========================================================================
  passport.use('local-login', new LocalStrategy({
    // by default, local strategy uses email and password, we will override with email
    usernameField : 'email',
    passwordField : 'password',
    passReqToCallback : true // allows us to pass back the entire request to the callback
  },
  function(req, email, password, done) { // callback with email and password from our form

    //Structure to hold the user data once he logins successfully
    var loggedInUser = {},
        deviceId;

    loginData = req.body;

    if(typeof loginData.deviceId !== 'undefined') {
      deviceId = loginData.deviceId;
      SCUBE_LOG.info("Namma-Login : Device Id is : "+deviceId);
    } else {
      //Invalid case, device id should be present
      return done(null, false, {message: 'Device Id should be present. Please try again'});
    }
    
    // Get the hashed password corresponding to the email from the DB
    var userLoginSp = new sp('usp_user_auth');
    userLoginSp.add(email, true);
    userLoginSp.add('1', false);
    userLoginSp.add(deviceId, false);
    dbConnect.query(userLoginSp.call(), function(err,rows) {

      if (err || !rows) {
        SCUBE_LOG.error('Login SP DB Err For '+email+' Err : '+err);
        return done(null, false, {message: 'Oops!! Something went wrong, try again'});
      }

      switch(rows[0][0].status) {
        case DEFS.CONST.DB_USER_ACCOUNT_EXISTS_AND_IS_VALIDATED:
             loggedInUser.isEmailValidated = DEFS.CONST.SESSION_USER_VALIDATED;
             break;
        case DEFS.CONST.DB_USER_ACCOUNT_DOES_NOT_EXISTS:
        case DEFS.CONST.DB_USER_EXISTS_FOR_DIFFERENT_USER_TYPE:
             SCUBE_LOG.info("User auth Failure : "+rows[0][0].reason+' For user: '
             +email);
             return done(null, false, {message: 'Email or Password provided is wrong'});
             break;
        case DEFS.CONST.DB_USER_ACCOUNT_NOT_VERIFIED:
        case DEFS.CONST.DB_USER_ACCOUNT_NOT_VERIFIED_LINK_EXPIRED:
             SCUBE_LOG.info("User auth : email"+email+' Userid '
             +rows[0][0].user_id+' Status '+rows[0][0].reason);
             loggedInUser.isEmailValidated = 
                  DEFS.CONST.SESSION_USER_NOT_VALIDATED;
             break;
        default:
              //Ivalid case  
              break;
      }

      loggedInUserId = rows[0][0].user_id;
      dbPwd = rows[0][0].password;
      var hash = new hasher();

      // Validate the password
      var isValidPassword = hash.validatePassword(password, dbPwd);
      SCUBE_LOG.info("Is password valid: "+isValidPassword);

      // Handle wrong email or password
      // Send error message, no session variables are saved
      if(!isValidPassword) {
        return done(null, false, {message: 'The Email or Password provided is wrong.'});
      }

      loggedInUser.user_id     = loggedInUserId;
      loggedInUser.email_id    = email;
      loggedInUser.isNammaUser = DEFS.CONST.SESSION_NAMMA_USER;
      loggedInUser.deviceId    = deviceId;

      // All is well, return successful user
      SCUBE_LOG.info('User Login Success for user:'+loggedInUser.user_id+'. email : '+email+'. isNammaUser : '+loggedInUser.isNammaUser);

      // Successfully logged in
      return done(null, loggedInUser, {message: 'Welcome '+email});
    });
  }));
  
  // (TBD) Get the details of the user 
  function getUserProfile (loggedInUserId) {
    var getUserProfileSp = new sp('usp_get_user_profile');
    getUserProfileSp.add(loggedInUserId, false);
    dbConnect.query(getUserProfileSp.call(), function(err,rows){
      if(err)
        return err;
      console.log(rows);
      return rows[0];
    }); 
  }
};
