// Usage in your .js file
// var ju = require('sparkk-lib/json-util');
// var fbRequest = new ju();
// 
// Http Request options object
// var options = {
//     host: 'graph.facebook.com',
//     port: 443,   // use 443 for https else dont add this option in the list
//     path: '/oauth/access_token',
//     method: 'GET',
//     headers: {
//         'Content-Type': 'application/json'
//     }
// };
// 
// Invoke json methods
// fbRequest.getJSON(options, function() {
//      console.log("Invoked after response is received.");    
// });

var http = require("http");
var https = require("https");

// Enable/Disable Server Side Logger
var activateLogger = false;

/**
 * getJSON:  REST get request returning JSON object(s)
 * @param options: http options object
 * @param callback: callback to pass the results JSON object(s) back
 */
var jsonUtil = function() {

  this.log = function(msg) {
    if(typeof console !== 'undefined' && activateLogger) {
      console.log('JSON-UTIL : '+msg);
    }
  }

  this.getJSON = function(options, onResult) {
    this.log("getJSON method invoked");

    var prot = options.port == 443 ? https : http;
    var req = prot.request(options, function(res) {
      var output = '';
      res.setEncoding('utf8');

      res.on('data', function (jsonRes) {
        output += jsonRes;
      });

      res.on('end', function() {
        var jsonObj = null;

        try {
            jsonObj = JSON.parse(output);
        } catch (e) {
            jsonObj = {};
            jsonObj['result'] = output;
        }

        onResult('JSON-UTIL : GET Success', res.statusCode, jsonObj);
      });
    });

    req.on('error', function(err) {
      onResult('JSON-UTIL : Error sending GET request' + err.message, 500, '');
    });

    req.end();
  }

  this.postJSON = function(options, dataString, onResult) {
    this.log("post method invoked");

    var req = http.request(options, function(res) {
      var output = '';
      res.setEncoding('utf8');

      res.on('data', function (jsonRes) {
        output += jsonRes;
      });

      res.on('end', function() {
        var jsonObj = null;

        try {
          jsonObj = JSON.parse(output);
        } catch (e) {
          jsonObj = {};
          jsonObj['result'] = output;
        }

        onResult('JSON-UTIL : POST Success', res.statusCode, jsonObj);
      });

      console.log('HEADERS: ' + JSON.stringify(res.headers));
    });

    req.on('error', function(err) {
      onResult('JSON-UTIL : Error sending POST request' + err.message + " errorCode = " + e.code, 500, '');
    });

    req.write(dataString);
    req.end();
  }

  /* Checks if the provided JSON string is valid */
  this.toJsonObject = function(jsonString) {
    console.log("JSON-UTIL : checking validity of json string : "+jsonString);

    try {
      var parsedJson = JSON.parse(jsonString);
      // Handle non-exception-throwing cases:
      // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,
      // but... JSON.parse(null) returns 'null', and typeof null === "object", 
      // so we must check for that, too.
      if (parsedJson && typeof parsedJson === "string" && parsedJson !== null) {
        return parsedJson;
      }
    }
    catch (e) { }

    return false;
  };

  this.isJsonString = function(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
  };
};

module.exports = jsonUtil;
