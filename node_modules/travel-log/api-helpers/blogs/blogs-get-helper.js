//////////////////////////////////////////////////////////////////////////
//                  Blogs API helpers
// Here we handle all requests related to the Blogs API END POINT 
// Usage: 
// var blogsApiHelper       = require(DEFS.DIR.API_HELPER_BLOGS);
// var blogsApiHelperObj    = new blogsApiHelper();
//////////////////////////////////////////////////////////////////////////

var proximty   = require(DEFS.DIR.PROXIMITY_CALCULATOR);  // Global Json Library Utility
var proximtyFinder = new proximty();
var mongodb     = require('mongodb');
var MongoClient = mongodb.MongoClient;
var math        = require('mathjs');

var blogs = function() {
  // Fetch the blogs based on most viewed count

  //format for call back: callback(returnMsg,returnData);
  this.getBlogsByViewCount = function(req, res, callback) {

    var returnData = {};
    var returnMsg;

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {
        // -1 indicates sort in decending order 
        var cursor =db.collection('blogs_table').find();
        var allBlogs = [];
        cursor.each(function(err, doc) {
          if(doc!=null){ 
            var blogArray = []; 
            blogArray = doc.blogs;
            blogArray.forEach(function(blogObj){
              allBlogs.push(blogObj);
            });
          } else { // Last row
            // Sort blogs based on view count in decending order
            allBlogs.sort(function(a, b) {return b['viewCount'] - a['viewCount']});
            returnMsg = 'success';
            callback(returnMsg, allBlogs);
            return;
          }
        });        
      }
    });
  }

  // Format for call back: callback(returnMsg,returnData);
  this.searchBlogsByLocationName = function(req, res, location_name, callback) {

    var returnData = {};
    var returnMsg;

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {
        var blog_tbl  = db.collection('blogs_table');
        blog_tbl.findOne({"_id": location_name}, function(err, doc) {
          if(!doc){
            console.log("No blogs exists for location " + location_name);
            returnMsg = 'failure'
            callback(returnMsg, null);
            return;
          } else {
            returnMsg = 'success';
            callback(returnMsg, doc);
            return;
          }
        });
      }
    });
  }

   //format for call back: callback(returnMsg,returnData);
  this.getBlogsByTopLocation = function(req, res, callback) {

    var returnData = {};
    var returnMsg;

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {
        // -1 indicates sort in decending order 
        var cursor =db.collection('blogs_table').find().sort({ "totalBlogCount": -1});
        // First object is the highest/top location 
        cursor.nextObject(function(err, object) {
          returnMsg = 'success';
          callback(returnMsg, object);
          return;
        });    
      }
    });
  }
   //format for call back: callback(returnMsg,returnData);
  this.getBlogsByUsername = function(req, res, user_name,callback) {

    var returnData = {};
    var returnMsg;


    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {
        var profile_tbl  = db.collection('user_profile_table');
        profile_tbl.findOne({"_id": user_name}, function(err, doc) {
          if(!doc){
            console.log("No user exists for user " + user_name);
            returnMsg = 'failure'
            callback(returnMsg, null);
            return;
          } else {
            returnMsg = 'success';
            callback(returnMsg, doc);
            return;
          }
        });
      }
    });
  }

   //format for call back: callback(returnMsg,returnData);
  this.getPostsByUserProximity = function(req, res,callback) {

    var returnData = {};
    var returnMsg;
    var aggregatePostsCount = 0;

    var userLatLongObj = {};
    userLatLongObj.lat               = req.query.user_lat;
    userLatLongObj.long              = req.query.user_long;
    userLatLongObj.country           = req.query.user_country_name;
    userLatLongObj.radius_preference = req.query.user_radius_preference;

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {
        var blogs_tbl  = db.collection('blogs_table'); // Temporary untill we move lat long country to blogs table
        var cursor = blogs_tbl.find({"country": userLatLongObj.country});
        var resultPostsArr = [];
        cursor.each(function(err, doc) {
          if(doc!=null) { 
            var dbLatLongObj = {};
            dbLatLongObj.lat = doc.lat;
            dbLatLongObj.long = doc.long;
            var dist = proximtyFinder.getProximity(userLatLongObj,dbLatLongObj);
            if(dist <= userLatLongObj.radius_preference) {
              doc['distFromUser'] = dist;
              resultPostsArr.push(doc);
              aggregatePostsCount += doc.totalBlogCount;
            }
          } else { // Last row which is always null
              returnMsg = 'success';
              returnData['aggregatePostsCount'] = aggregatePostsCount;
              returnData['postArray'] = resultPostsArr;
              callback(returnMsg, returnData);
              return;
          } 
        });
      }
    });
  }

  var _isProximityInRange = function(req, res) {

  }
}
module.exports = blogs;

