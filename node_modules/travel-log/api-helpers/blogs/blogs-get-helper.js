//////////////////////////////////////////////////////////////////////////
//                  Blogs API helpers
// Here we handle all requests related to the Brands API END POINT 
// Usage: 
// var blogsApiHelper       = require(DEFS.DIR.API_HELPER_BLOGS);
// var blogsApiHelperObj    = new blogsApiHelper();
//////////////////////////////////////////////////////////////////////////

// Connect to the database
var dbConnect = require(DEFS.DIR.DB_CONNECT)('openshift');
var sp        = require(DEFS.DIR.DB_SP);

var blogs = function() {
  // Fetch the blogs based on most viewed count

  //format for call back: callback(returnMsg,returnData);
  this.getBlogsByViewCount = function(req, res, callback) {

    var returnData = {};
    var returnMsg;

    //Get the USP 
    var getBrands = new sp('usp_get_brands_by_location');
    getBrands.add(locationId, false);

    dbConnect.query(getBrands.call(), function(err, rows) {
      if(err || !rows) {
        SCUBE_LOG.info('DB Error while fetching all the Brands ' + err);
        returnMsg = 'failure'
        callback(returnMsg, null);
        return;
      }

      /* Data format received (multiple rows)
      [ 
       { 
           brand_id: 2, 
           brand_name: 'Nike', 
           scubit_count: 20 
        },
        {  brand_id: 1, 
           brand_name: 'Addias', 
           scubit_count: 0 
        }
      ] 

      // Restructure the received db data into a key=value pair json object
      // for easy access by the requestor

      /* Restructured format
        {
          brand: [
           {
              brand_name: "Nike",
              brand_id: 2,
              scubit_count: 0 
           },
           {
              brand_name: "Addias",
              brand_id: 1,
              scubit_count: 0
            }
          ]
        }*/

      // Build jsonData for brand 
      var jsonReqArray = {};
      jsonReqArray.reqtype = DEFS.CONST.JSON_TYPE['singleArrayMultipleObj'];
      jsonReqArray.reqData = rows;
      // FIXME - For other json types the arrays name can be multipe
      // need to add a generic request array builder
      jsonReqArray.arrayName = 'brands'; 
      jsonReqArray.rowId = 'brand_id';  // Json Response is formed using unique brand_id
      jsonReqArray.imageName = 'brand_id'; // Mongo Db column name
      jsonReqArray.mongoTblName = DEFS.CONST.MONGO_DB_TBL_NAME_BRANDS_IMAGES; 
      jsonReqArray.imageJson = 1; 
 
      jBuilder.buildDBDataJSON(jsonReqArray, function(jsonData) {
          // Send back the restructured data
        SCUBE_LOG.info('usp : get_brands_by_location success');
        //SCUBE_LOG.info(jsonData);
        returnMsg = 'success';
        callback(returnMsg, jsonData);
        return;
      });
    });
  }

  // Format for call back: callback(returnMsg,returnData);
  // Fetch the brands details from DB using the provided location ID, brand name
  this.searchBlogsByLocationName = function(req, res, location_name, callback) {

    var returnData = {};
    var returnMsg;

    // Get the USP 
    var searchBrands = new sp('usp_search_brands_by_name');

    searchBrands.add(searchArray.locId, false);

    // brandName is already in string format, hence sending false to lib
    searchBrands.add(searchArray.brandName, true);

    dbConnect.query(searchBrands.call(), function(err, rows) {
      if(err || !rows) {
        SCUBE_LOG.info('DB Error while fetching all the brands ' + err);
        returnMsg = 'failure'
        callback(returnMsg, null);
        return;
      }

      // For output format refer :
      // https://sparkking.wikispaces.com/API+-+Brands+End+Points#QUERY_CASE_SEARCH

      // Build jsonData for brand 
      var jsonReqArray = {};
      jsonReqArray.reqtype = DEFS.CONST.JSON_TYPE['singleArrayMultipleObj'];
      jsonReqArray.reqData = rows;

      jsonReqArray.arrayName = 'brands';
      jsonReqArray.rowId = 'shop_profile_id'; // Json Response is formed using unique brand_id
      jsonReqArray.imageName = 'brand_id'; // Mongo Db column name
      jsonReqArray.mongoTblName = DEFS.CONST.MONGO_DB_TBL_NAME_BRANDS_IMAGES; 
      jsonReqArray.imageJson = 1;  
 
      jBuilder.buildDBDataJSON(jsonReqArray, function(jsonData) {
          // Send back the restructured data
        SCUBE_LOG.info('usp : search_brands_by_name success');
        //SCUBE_LOG.info(jsonData);
        returnMsg = 'success';
        callback(returnMsg, jsonData);
        return;
      });
    });
  }

   //format for call back: callback(returnMsg,returnData);
  this.getBlogsByTimeStamp = function(req, res, callback) {

    var returnData = {};
    var returnMsg;

    //Get the USP 
    var getBrandsForAShop = new sp('usp_get_brands_by_shop_profile');
    getBrandsForAShop.add(shopProfileId, false);

    dbConnect.query(getBrandsForAShop.call(), function(err, rows) {
      if(err || !rows) {
        SCUBE_LOG.info('DB Error : ' + err + ' while fetching the Brands for '
                        + 'shop profile id ' + shopProfileId);
        returnMsg = 'failure'
        callback(returnMsg, null);
        return;
      }
      
      // For output format refer :
      // https://sparkking.wikispaces.com/API+-+Brands+End+Points#QUERY_CASE_BY_SHOP_PROFILE_ID
      // Build jsonData for brand 
      var jsonReqArray = {};
      jsonReqArray.reqtype = DEFS.CONST.JSON_TYPE['singleArrayMultipleObj'];
      jsonReqArray.reqData = rows;

      jsonReqArray.arrayName = 'brands';

      jBuilder.buildDBDataJSON(jsonReqArray, function(jsonData) {
          // Send back the restructured data
        SCUBE_LOG.info('usp : get_brands_by_shop_profile success');
        //SCUBE_LOG.info(jsonData);
        returnMsg = 'success';
        callback(returnMsg, jsonData);
        return;
      });
    });
  }
   //format for call back: callback(returnMsg,returnData);
  this.getBlogsByUsername = function(req, res, user_name,callback) {

    var returnData = {};
    var returnMsg;

    //Get the USP 
    var getAllBrands = new sp('usp_get_all_brands');
    dbConnect.query(getAllBrands.call(), function(err, rows) {
      if(err || !rows) {
        SCUBE_LOG.info('DB Error : ' + err + ' while fetching all the Brands ');
        returnMsg = 'failure'
        callback(returnMsg, null);
        return;
      }

      // For output format refer :
      // https://sparkking.wikispaces.com/API+-+Brands+End+Points#QUERY_CASE_BY_SHOP_PROFILE_ID
      // Build jsonData for brand 
      var jsonReqArray = {};
      jsonReqArray.reqtype = DEFS.CONST.JSON_TYPE['singleArrayMultipleObj'];
      jsonReqArray.reqData = rows;

      jsonReqArray.arrayName = 'brands'; 
 
      jBuilder.buildDBDataJSON(jsonReqArray, function(jsonData) {
          // Send back the restructured data
        SCUBE_LOG.info('usp : get_all_brands success');
        //SCUBE_LOG.info(jsonData);
        returnMsg = 'success';
        callback(returnMsg, jsonData);
        return;
      });
    });
  }
}
module.exports = blogs;

