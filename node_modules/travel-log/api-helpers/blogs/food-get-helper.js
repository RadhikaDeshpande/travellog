//////////////////////////////////////////////////////////////////////////
//                  Food API helpers
// Here we handle all get requests related to the food API END POINT 
// Usage: 
// var foodApiHelper      = require(DEFS.DIR.API_HELPER_FOOD_PLACES_GET);
// var foodApiHelperObj   = new foodApiHelper();
//////////////////////////////////////////////////////////////////////////

var mongodb     = require('mongodb');
var MongoClient = mongodb.MongoClient;

var food = function() {
  // Fetch the food places based on most visited count

  //format for call back: callback(returnMsg,returnData);
  this.getFoodPlacesByVisitCount = function(req, res, callback) {
    var returnData = {};
    var returnMsg;

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {
        // -1 indicates sort in decending order 
        var cursor =db.collection('food_places_table').find().sort({ "visitCount": -1}); 
        var resArray = [];
        cursor.each(function(err, object) {
          if(object!=null){
            resArray.push(object);
          } else {
              returnMsg = 'success';
              callback(returnMsg, resArray);
              return;
          }
        });
      }
    });
  }

  // Format for call back: callback(returnMsg,returnData);
  // Fetch the food places from DB using the provided location ID
  this.searchFoodPlacesByLocationName = function(req, res, location_name, callback) {

    var returnData = {};
    var returnMsg;

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {
        var cursor = db.collection('food_places_table').find({location: location_name});
        var resArray = [];
        var count = 0;
        returnMsg = 'success';
        cursor.each(function(err, object) {
          if(object!=null){
            resArray.push(object);
            count = +count +1; // ensure atleast one entry exists 
          } else {
              if(count == 0){ // If no entry was found 
                returnMsg = 'failure';
                callback(returnMsg, resArray);
                return;
              }
              callback(returnMsg, resArray);
              return;
          }
        });
      }
    });
  }

   //format for call back:                                                                                  callback(returnMsg,returnData);
  this.getBlogsByTopLocation = function(req, res, callback) {

    var returnData = {};
    var returnMsg;

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {
        // -1 indicates sort in decending order 
        var cursor =db.collection('blogs_table').find().sort({ "totalBlogCount": -1});
        // First object is the highest/top location 
        cursor.nextObject(function(err, object) {
          returnMsg = 'success';
          callback(returnMsg, object);
          return;
        });    
      }
    });
  }
   //format for call back: callback(returnMsg,returnData);
  this.getBlogsByUsername = function(req, res, user_name,callback) {

    var returnData = {};
    var returnMsg;

    MongoClient.connect(connection_string, function (err, db) {
      if(err) {
        console.log('Unable to connect to the mongoDB server. Error:' + err);
      } else {
        var profile_tbl  = db.collection('user_profile_table');
        profile_tbl.findOne({"_id": user_name}, function(err, doc) {
          if(!doc){
            console.log("No user exists for user " + location_name);
            returnMsg = 'failure'
            callback(returnMsg, null);
            return;
          } else {
            returnMsg = 'success';
            callback(returnMsg, doc);
            return;
          }
        });
      }
    });

  }
}
module.exports = food;

