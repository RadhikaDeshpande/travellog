//////////////////////////////////////////////////////////////////////////
//                  Blogs Post API helpers
// Here we handle all requests related to the Blogs API END POINT 
// Usage: 
// var blogsPostApiHelper     = require(DEFS.DIR.API_HELPER_BLOGS_POST);
// var blogsPostApiHelperObj  = new blogsPostApiHelper();
//////////////////////////////////////////////////////////////////////////

// Connect to the database
var mongodb     = require('mongodb');
var MongoClient = mongodb.MongoClient;

var blogsPostHelper = function() {
  
  // Insert the blog 
  /*
  Following tables are updated as part of this request
  1. user_profile_table - Updates the blog object of this user with 
                          this new entry. 
  2. blogs_table - Updates the blogs table for this locationString and incremenets the total 
                  blog count for this location.  If location is not found in DB, a new entry is added

  3. food_places_table - Updates the food table for given food_joint_name with food expreience shared by user in this rquest.  If the food_joint_name
                        is not present a new entry is created. 
  4. location_details_table - Updates the meta data for this locationString if not present already in the DB. 
  */

  this.insert = function(req,travelImagesArray, foodImagesArray,callback) {

    var returnData = {};
    var returnMsg;

    _uploadToImageServer(travelImagesArray,function(travelImagesArray) {
      _uploadToImageServer(foodImagesArray,function(foodImagesArray) {
        MongoClient.connect(connection_string, function (err, db) {
          if(err) {
            console.log('Unable to connect to the mongoDB server. Error:' + err);
          } else {

            var locBlogObj = {};
            var foodObj = {};
            var locationDetails = JSON.parse(req.body.cityDetails);
            console.log(locationDetails);
          // If food Joint Name is not found in DB add a new entry
          // Else increment the visit count of the existing entry
          if(req.body.food_text){
            foodObj['food_text'] = req.body.food_text;
          }

          if(req.body.travel_text){
             locBlogObj['travel_text'] = req.body.travel_text;
          }

            foodObj['foodImages'] = foodImagesArray;
            foodObj['user']       = req.body.email_id;

            locBlogObj['images']  = travelImagesArray;
            locBlogObj['viewCount'] = 0;

            var profile_tbl  = db.collection('user_profile_table');
            var blog_tbl     = db.collection('blogs_table');
            var food_tbl     = db.collection('food_places_table');
            var location_tbl = db.collection('location_details_table');

            // Location City, State, Country is saved in locationString
            // Insert location details if its a new location
            location_tbl.findOne({"_id": req.body.locationString}, function(err, doc) {
              if(!doc) { // New entry do an insert
                  location_tbl.insert({"_id": req.body.locationString,country:req.body.country,details:locationDetails});
              }
            });


            if(req.body.food_joint_name) { // only if food joint name is given 
              var foodTblId  = req.body.food_joint_name + " at " + req.body.locationString ;
              food_tbl.findOne({"_id": foodTblId}, function(err, doc) {
                if(!doc) { // New entry do an insert
                  var foodPostArr = [];
                  foodPostArr.push(foodObj);
                  food_tbl.insert({"_id": foodTblId, "locationString":req.body.locationString, visitCount:1,"foodPosts" :foodPostArr});
                } else {
                  food_tbl.update({"_id": foodTblId},{$addToSet : {"foodPosts" :foodObj}},{upsert:true},function (err, result) {
                    if(err){
                      console.log(err);
                    } else {
                      food_tbl.update({"_id": foodTblId },{$inc : {visitCount : 1}},function(err,result) {
                        if(err){
                          console.log(err);
                        }
                      });
                    }
                  });
                }
              });
            }

            blog_tbl.findOne({"_id": req.body.locationString}, function(err, doc) {
              if(!doc) { // entry not found, new city 
                locBlogObj['blogNumber']= 1;
                var locBlogArr = [];
                locBlogArr.push(locBlogObj);
                var lat = locationDetails.geobyteslatitude;
                var long = locationDetails.geobyteslongitude;
                blog_tbl.insert( { "_id": req.body.locationString ,country:req.body.country,lat:lat,long:long,totalBlogCount:1,locMetaData:locationDetails,"blogs" :locBlogArr});
              } else {
                  var blogNumber = +doc.totalBlogCount + 1;
                  locBlogObj['blogNumber']= blogNumber;
                  blog_tbl.update({"_id":req.body.locationString},{$addToSet : {"blogs" :locBlogObj}},{upsert:true},function (err, result) {
                    if(err){
                      console.log(err);
                    } else {
                      blog_tbl.update({"_id":req.body.locationString},{$inc : {totalBlogCount : 1}},function(err,result) {
                      });
                    }
                  });
                }
            });
        
            profile_tbl.findOne({"_id": req.email_id}, function(err, doc) {
              if(!doc) { // entry not found new user 
                console.log("Wrong email id provided");
                callback(returnMsg, null);
                return;
              } else {
                // Create a new blog object and add it to the user.
                var userBlogObj = {}
                userBlogObj['content'] = req.body.content;
                userBlogObj['images'] = travelImagesArray;
                var blogNumber = +doc.totalBlogCount + 1;
                userBlogObj['blogNumber'] = blogNumber;
                userBlogObj['locationString']= req.body.locationString;
                
                console.log(userBlogObj);
                profile_tbl.update({"_id":req.body.email_id},{$addToSet : {"blogs" :userBlogObj}},{upsert:true},function (err, result) {
                  if (err) {
                    console.log(err);
                  } else {
                    //console.log('Inserted %d documents into the "Profile Table" collection. The documents inserted with "_id" are:', result.length, result);
                    profile_tbl.update({"_id":req.body.email_id},{$inc : {totalBlogCount : 1}},function(err,result) {
                      if(err){
                        console.log(err);
                      } else {
                        returnMsg = 'success';
                        callback(returnMsg, null);
                        return;
                      }
                    });
                  }
                });
              }
            });
          }
        });
      });
    });
  }

  this.delete = function(req, callback) {
  
  }

  this.update = function(req, callback) {

  }


  // Upload the images and get the image URL's
  var _uploadToImageServer = function(imagesArray,callback) {
    var keys = Object.keys(imagesArray);
    var count = 0;
    var len = Object.keys(imagesArray).length;
    if(!len) { // no images provided
      callback(imagesArray);
    }
    keys.forEach(function(key) { // Loop through each column
      var filePath = imagesArray[key];
      cloudinary.uploader.upload(filePath, function(cloudinaryResult) {
        cloudinaryResult.public_id;
        imagesArray[key] = cloudinary.url(cloudinaryResult.public_id,{ width: 350, height: 750});
        count = +count + 1;
        if(count == len){
          callback(imagesArray);
        }
      });
    });
  };
}
module.exports = blogsPostHelper;
