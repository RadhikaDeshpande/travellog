//////////////////////////////////////////////////////////////////////////
//                  Blogs Post API helpers
// Here we handle all requests related to the Blogs API END POINT 
// Usage: 
// var blogsPostApiHelper     = require(DEFS.DIR.API_HELPER_BLOGS_POST);
// var blogsPostApiHelperObj  = new blogsPostApiHelper();
//////////////////////////////////////////////////////////////////////////

// Connect to the database
var dbConnect = require(DEFS.DIR.DB_CONNECT)('openshift');
var sp        = require(DEFS.DIR.DB_SP);

var mongodb     = require('mongodb');
var MongoClient = mongodb.MongoClient;

var blogsPostHelper = function() {
  
  // Insert the blog 
  this.insert = function(req,imagesArray, callback) {

    var returnData = {};
    var returnMsg;

    _uploadToImageServer(imagesArray,function(imagesArray) {
      MongoClient.connect(connection_string, function (err, db) {
        if(err) {
          console.log('Unable to connect to the mongoDB server. Error:' + err);
        } else {

          var locBlogObj = {}

          locBlogObj['content'] = req.body.content;
          locBlogObj['images'] = imagesArray;
          locBlogObj['viewCount']= 0;
          locBlogObj['location']= req.body.location;

          var profile_tbl = db.collection('user_profile_table');
          var blog_tbl    = db.collection('blogs_table');


          blog_tbl.findOne({"_id": req.body.location}, function(err, doc) {
            if(!doc) { // entry not found, new location 
              locBlogObj['blogNumber']= 1;
              var locBlogArr = [];
              locBlogArr.push(locBlogObj);
              blog_tbl.insert( { "_id": req.body.location ,totalBlogCount:1, "blogs" :locBlogArr});
            } else {
                var blogNumber = +doc.totalBlogCount + 1;
                locBlogObj['blogNumber']= blogNumber;
                blog_tbl.update({"_id":req.body.location},{$addToSet : {"blogs" :locBlogObj}},{upsert:true},function (err, result) {
                  if(err){
                    console.log(err);
                  } else {
                    blog_tbl.update({"_id":req.body.location},{$inc : {totalBlogCount : 1}},function(err,result) {
                    });
                  }
                });
              }
          });
      

          profile_tbl.findOne({"_id": req.email_id}, function(err, doc) {
            if(!doc) { // entry not found new user 
              console.log("Wrong email id provided");
              callback(returnMsg, null);
              return;
            } else {
              // Create a new blog object and add it to the user.
              var userBlogObj = {}
              userBlogObj['content'] = req.body.content;
              userBlogObj['images'] = imagesArray;
              var blogNumber = +doc.totalBlogCount + 1;
              userBlogObj['blogNumber'] = blogNumber;
              userBlogObj['location']= req.body.location;
              
              console.log(userBlogObj);
              profile_tbl.update({"_id":req.body.email_id},{$addToSet : {"blogs" :userBlogObj}},{upsert:true},function (err, result) {
                if (err) {
                  console.log(err);
                } else {
                  //console.log('Inserted %d documents into the "Profile Table" collection. The documents inserted with "_id" are:', result.length, result);
                  profile_tbl.update({"_id":req.body.email_id},{$inc : {totalBlogCount : 1}},function(err,result) {
                    if(err){
                      console.log(err);
                    } else {
                      returnMsg = 'success';
                      callback(returnMsg, null);
                      return;
                    }
                  });
                }
              });
            }
          });
        }
      });
    });
  }

  this.delete = function(req, callback) {

    var returnData = {};
    var returnMsg;

    dbConnect.query(deleteScubit.call(), function(err, rows) {
      if(err || !rows) {
        SCUBE_LOG.error('DB Error '+err);
        SCUBE_LOG.error('Rows Returned '+rows);
        returnMsg = 'DB Fatal Error while updating scubit';
        callback(returnMsg,returnData);
        return;
      }

       // Build jsonData for scubit insert success
      var jsonReqArray = {};
      jsonReqArray.reqtype = DEFS.CONST.JSON_TYPE['singleArraySingleObj'];
      jsonReqArray.reqData = rows;
      jsonReqArray.arrayName = 'success'; 
 
      jBuilder.buildDBDataJSON(jsonReqArray, function(jsonData) {
          // Send back the restructured data
        SCUBE_LOG.info('usp : usp_delete_scubit success');
        //SCUBE_LOG.info(jsonData);
        returnMsg = 'success';
        callback(returnMsg, jsonData);
        return;
      });
    });
  }

  this.update = function(req, callback) {

    var returnData = {};
    var returnMsg;
    
    dbConnect.query(updateScubit.call(), function(err, rows) {
      if(err || !rows) {

        SCUBE_LOG.error('DB Error '+err);
        SCUBE_LOG.error('Rows Returned '+rows);
        returnMsg = 'DB Fatal Error while updating scubit';
        callback(returnMsg,returnData);
        return;
      }

      returnMsg = "success";
      //SCUBE_LOG.info("Scube update successful");
      //SCUBE_LOG.info(returnData);
      callback(returnMsg,returnData);
    });
  }


  // Upload the images and get the image URL's
  var _uploadToImageServer = function(imagesArray,callback) {
    var keys = Object.keys(imagesArray);
    var count = 0;
    var len = Object.keys(imagesArray).length;
    keys.forEach(function(key) { // Loop through each column
      var filePath = imagesArray[key];
      cloudinary.uploader.upload(filePath, function(cloudinaryResult) {
        cloudinaryResult.public_id;
        imagesArray[key] = cloudinary.url(cloudinaryResult.public_id);
        count = +count + 1;
        if(count == len){
          callback(imagesArray);
        }
      });
    });
  };
}
module.exports = blogsPostHelper;
