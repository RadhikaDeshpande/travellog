//////////////////////////////////////////////////////////////////////////
//                  User Profile Update helpers
// Here we handle all requests related to the USER Profile Update API END POINT 
// Usage: 
//  var userFavoritesUpdateHelper   = require(DEFS.DIR.API_HELPER_USER_FAVORITES_UPDATE);
//  var userFavoritesUpdateHelperObj  = new userFavoritesUpdateHelper();
//////////////////////////////////////////////////////////////////////////

// Connect to the database
var dbConnect = require(DEFS.DIR.DB_CONNECT)('openshift');
var sp        = require(DEFS.DIR.DB_SP);

var userFavoritesUpdateHelper = function() {


  // Brands not supported for first release 
  this.brands = function(userFavoritesArr, callback) {

    var returnData = {};
    var returnMsg;

    var updateUserFavBrands = new sp('usp_user_brand_preferences');

    updateUserFavBrands.add(userProfileArr.user_id, false);
    updateUserFavBrands.add(userProfileArr.user_id, false);
    updateUserFavBrands.add(userProfileArr.action_type, false);
    
    dbConnect.query(updateUserProfile.call(), function(err, rows) {
      if(err || !rows) {

        SCUBE_LOG.error('DB Error '+err);
        SCUBE_LOG.error('Rows Returned '+rows);
        returnMsg = 'DB Fatal Error while updating user brands preferances';
        callback(returnMsg,returnData);
        return;
      }
  
      returnMsg = "success";
      SCUBE_LOG.info("User profile update successful");
      callback(returnMsg,returnData);
    });
  }

  this.categories = function(postData, callback) {

    var returnData = {};
    var returnMsg;
    
    var addString = "";
    var removeString = "";

    var keys = Object.keys(postData);  
    // If the id is already present copy only the image part 
    keys.forEach(function(key) { // Loop through each column
      if(key === 'user_id') {
        // Do nothing 
      } else {
        var value = postData[key];
        if(value === '1') {
          // Add the key to the db addlist
          addString += ''+key;
          addString +='$';
        } else{
          // Add the key to  db removelist
          removeString += ''+key;
          removeString +='$';
        }
      }             
    });

    //https://sparkking.wikispaces.com/ADD/DELETE%20POST%20Request
    // This is to remove the last added delimeter 
    addString = addString.substring(0, addString.length - 1);
    removeString = removeString.substring(0, removeString.length - 1);

    var addUserFavCategory = new sp('usp_user_category_preferences');
    addUserFavCategory.add(postData.user_id, false);
    addUserFavCategory.add(addString, true);
    addUserFavCategory.add(DEFS.CONST.SP_OPCODE['add'], false);
    
    dbConnect.query(addUserFavCategory.call(), function(err, rows) {
      if(err || !rows) {
        SCUBE_LOG.error('DB Error '+err);
        SCUBE_LOG.error('Rows Returned '+rows);
        returnMsg = 'DB Fatal Error while updating user category preferances';
        callback(returnMsg,returnData);
        return;
      }

      // If add DB was succesfull, try remove 
      var removeUserFavCategory = new sp('usp_user_category_preferences');
      removeUserFavCategory.add(postData.user_id, false);
      removeUserFavCategory.add(removeString, true);
      removeUserFavCategory.add(DEFS.CONST.SP_OPCODE['delete'], false);

      dbConnect.query(removeUserFavCategory.call(), function(err, rows) {
        if(err || !rows) {
          SCUBE_LOG.error('DB Error '+err);
          SCUBE_LOG.error('Rows Returned '+rows);
          returnMsg = 'DB Fatal Error while updating user category preferances';
          callback(returnMsg,returnData);
          return;
        }

        returnMsg = "success";
        SCUBE_LOG.info("User category update successful");
        callback(returnMsg,returnData);
      });
    });
  }
}
module.exports = userFavoritesUpdateHelper;
