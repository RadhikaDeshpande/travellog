//////////////////////////////////////////////////////////////////////////
//                  User Privacy Update helpers
// Here we handle all requests related to the USER Privacy Update API END POINT 
// Usage: 
// var userPrivacyUpdateHelper     = require(DEFS.DIR.API_HELPER_USER_PRIVACY_UPDATE);
// var userPrivacyUpdateHelperObj  = new userPrivacyUpdateHelper();
//////////////////////////////////////////////////////////////////////////

// Connect to the database
var dbConnect = require(DEFS.DIR.DB_CONNECT)('openshift');
var sp        = require(DEFS.DIR.DB_SP);

var userPrivacyUpdateHelper = function() {
  
  this.update = function(userPrivacyArr, callback) {

    var returnData = {};
    var returnMsg;

    var updateUserPrivacy = new sp('usp_update_user_privacy_pref');

    // Add or Add Null elements are optional, hence need to
    // add the element's value or a NULL depending on its 
    // value. Added addOrAddNull function to lib to reduce 
    // code clutter here
    updateUserPrivacy.add(userPrivacyArr.user_id, false);
    updateUserPrivacy.add(userPrivacyArr.email_pref_id, false);
    updateUserPrivacy.add(DEFS.CONST.SP_OPCODE['update'], false);  
    
    dbConnect.query(updateUserPrivacy.call(), function(err, rows) {
      if(err || !rows) {

        SCUBE_LOG.error('DB Error '+err);
        SCUBE_LOG.error('Rows Returned '+rows);
        returnMsg = 'DB Fatal Error while updating user privacy';
        callback(returnMsg,returnData);
        return;
      }
  
      returnMsg = "success";
      SCUBE_LOG.info("User Privacy update successful");
      callback(returnMsg,returnData);
    });
  }
}
module.exports = userPrivacyUpdateHelper;
