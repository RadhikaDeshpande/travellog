//////////////////////////////////////////////////////////////////////////
//                  Scubits Context Get API helpers
// Here we handle all requests related to the SCUBITS API END POINT 
// Usage: 
// var scubitsContextGetApiHelper = require(DEFS.DIR.API_HELPER_SCUBITS_CONTEXT_GET);
// var scubitsContextGetApiHelperObj  = new scubitsContextGetApiHelper();
//////////////////////////////////////////////////////////////////////////

// Connect to the database
var dbConnect = require(DEFS.DIR.DB_CONNECT)('openshift');
var sp        = require(DEFS.DIR.DB_SP);

var scubitsContext = function() {

  // format for call back: callback(returnMsg, returnData);
  // Fetch all kinds of offers for scubits
  this.getAllOffers = function(callback) {

    var returnData = {};
    var returnMsg;

    //Get the USP 
    var getOffers = new sp('usp_get_all_offers');

    dbConnect.query(getOffers.call(), function(err, rows) {
      if(err || !rows) {
        SCUBE_LOG.info('DB Error : ' + err + ' while fetching all offers');
        returnMsg = 'failure'
        callback(returnMsg, null);
        return;
      }

      // For Output format refer : 
      // 
      console.log(rows);
      // Build jsonData for scubits 
      var jsonReqArray = {};
      jsonReqArray.reqtype = DEFS.CONST.JSON_TYPE['singleArrayMultipleObj'];
      jsonReqArray.reqData = rows;
      // FIXME - For other json types the arrays name can be multipe
      // need to add a generic request array builder
      jsonReqArray.arrayName = 'offers'; 
 
      jBuilder.buildDBDataJSON(jsonReqArray, function(jsonData) {
          // Send back the restructured data
        SCUBE_LOG.info('usp : usp_get_scubits_by_shop success');
        //SCUBE_LOG.info(jsonData);
        returnMsg = 'success';
        callback(returnMsg, jsonData);
        return;
      });
    });
  }

  this.getAllPriceRanges = function(callback) {

    var returnData = {};
    var returnMsg;

    //Get the USP 
    var getPriceRanges = new sp('usp_get_all_price_ranges');

    dbConnect.query(getPriceRanges.call(), function(err, rows) {
      if(err || !rows) {
        SCUBE_LOG.info('DB Error : ' + err + ' while fetching all price ranges');
        returnMsg = 'failure'
        callback(returnMsg, null);
        return;
      }

      // For Output format refer : 
      // 
      console.log(rows);
      // Build jsonData for scubits 
      var jsonReqArray = {};
      jsonReqArray.reqtype = DEFS.CONST.JSON_TYPE['singleArrayMultipleObj'];
      jsonReqArray.reqData = rows;
      // FIXME - For other json types the arrays name can be multipe
      // need to add a generic request array builder
      jsonReqArray.arrayName = 'price_ranges'; 
 
      jBuilder.buildDBDataJSON(jsonReqArray, function(jsonData) {
          // Send back the restructured data
        SCUBE_LOG.info('usp : usp_get_scubits_by_shop success');
        //SCUBE_LOG.info(jsonData);
        returnMsg = 'success';
        callback(returnMsg, jsonData);
        return;
      });
    });
  }

  this.getAllPaymentTypes = function(callback) {

    var returnData = {};
    var returnMsg;

    //Get the USP 
    var getPaymentTypes = new sp('usp_get_all_payment_types');

    dbConnect.query(getPaymentTypes.call(), function(err, rows) {
      if(err || !rows) {
        SCUBE_LOG.info('DB Error : ' + err + ' while fetching all payment types');
        returnMsg = 'failure'
        callback(returnMsg, null);
        return;
      }

      // For Output format refer : 
      // 
      console.log(rows);
      // Build jsonData for scubits 
      var jsonReqArray = {};
      jsonReqArray.reqtype = DEFS.CONST.JSON_TYPE['singleArrayMultipleObj'];
      jsonReqArray.reqData = rows;
      // FIXME - For other json types the arrays name can be multipe
      // need to add a generic request array builder
      jsonReqArray.arrayName = 'payment_types'; 
 
      jBuilder.buildDBDataJSON(jsonReqArray, function(jsonData) {
          // Send back the restructured data
        SCUBE_LOG.info('usp : usp_get_scubits_by_shop success');
        //SCUBE_LOG.info(jsonData);
        returnMsg = 'success';
        callback(returnMsg, jsonData);
        return;
      });
    });
  }

  //format for call back: callback(returnMsg,returnData);
  this.getAllScubitContext = function(req, res, callback) {

    var returnData = {};
    var returnMsg;

    //Get the USP 
    var getAllContext = new sp('usp_get_all_scubit_context');
    dbConnect.query(getAllContext.call(), function(err, rows) {
      if(err || !rows) {
        SCUBE_LOG.info('DB Error : ' + err + ' while fetching all scubit context all ');
        returnMsg = 'failure'
        callback(returnMsg, null);
        return;
      }

      // For output format refer :
      // https://sparkking.wikispaces.com/API+-+Scubits+Context+End+Points#Q_CASE_GET_ALL
      // Build jsonData for brand 
      var jsonReqArray = {};
      jsonReqArray.reqtype = DEFS.CONST.JSON_TYPE['multiArrayMultipleObj'];
      jsonReqArray.reqData = rows;

      jsonReqArray.arrayName = ['payment_types','price_ranges','offers']; 
      jsonReqArray.arrayLength = 3;
 
      jBuilder.buildDBDataJSON(jsonReqArray, function(jsonData) {
          // Send back the restructured data
        SCUBE_LOG.info('usp : usp_get_all_scubit_context success');
        //SCUBE_LOG.info(jsonData);
        returnMsg = 'success';
        callback(returnMsg, jsonData);
        return;
      });
    });
  }
}
module.exports = scubitsContext
