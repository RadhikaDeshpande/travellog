//////////////////////////////////////////////////////////////////////////
//                  Scubits Post API helpers
// Here we handle all requests related to the SCUBITS API END POINT 
// Usage: 
// var scubitsPostApiHelper     = require(DEFS.DIR.API_HELPER_SCUBITS_POST);
// var scubitsPostApiHelperObj  = new scubitsPostApiHelper();
//////////////////////////////////////////////////////////////////////////

// Connect to the database
var dbConnect = require(DEFS.DIR.DB_CONNECT)('openshift');
var sp        = require(DEFS.DIR.DB_SP);

var scubitsPostHelper = function() {
  
  // Insert the scubit 
  this.insert = function(scubitInfoArr, callback) {

    var returnData = {};
    var returnMsg;

    var insertScubit = new sp('usp_insert_scubit');
    insertScubit.add(scubitInfoArr.shop_profile_id, false);  
    insertScubit.addOrAddNull(scubitInfoArr.brand_id, false);    
    insertScubit.add(scubitInfoArr.user_id, false);
    insertScubit.add(scubitInfoArr.gender_id, false);
    insertScubit.add(scubitInfoArr.offer_id, false);
    insertScubit.add(scubitInfoArr.price_range_id, false);
    insertScubit.add(scubitInfoArr.payment_type_id, false);
    insertScubit.add(scubitInfoArr.start_date_time, true);
    insertScubit.add(scubitInfoArr.end_date_time, true);
    insertScubit.addOrAddNull(scubitInfoArr.notes, true);
    insertScubit.addOrAddNull(scubitInfoArr.photo_url, true);
    insertScubit.addOrAddNull(scubitInfoArr.other_brand_name, true);
    insertScubit.addOrAddNull(scubitInfoArr.number_of_items, false);  // Brand can be null if user is adding a new brand 
     
    dbConnect.query(insertScubit.call(), function(err, rows) {
      if(err || !rows) {

        SCUBE_LOG.error('DB Error '+err);
        SCUBE_LOG.error('Rows Returned '+rows);
        returnMsg = 'DB Fatal Error while inserting scubit';
        callback(returnMsg,returnData);
        return;
      }

      // Build jsonData for scubit insert success
      var jsonReqArray = {};
      jsonReqArray.reqtype = DEFS.CONST.JSON_TYPE['singleArraySingleObj'];
      jsonReqArray.reqData = rows;
      jsonReqArray.arrayName = 'success'; 
 
      jBuilder.buildDBDataJSON(jsonReqArray, function(jsonData) {
          // Send back the restructured data
        SCUBE_LOG.info('usp : usp_insert_scubit success');
        //SCUBE_LOG.info(jsonData);
        returnMsg = 'success';
        callback(returnMsg, jsonData);
        return;
      });
    });
  }

  this.delete = function(scubitInfoArr, callback) {

    var returnData = {};
    var returnMsg;

    var deleteScubit = new sp('usp_delete_scubit');
    deleteScubit.add(scubitInfoArr.scubit_id, false);

    dbConnect.query(deleteScubit.call(), function(err, rows) {
      if(err || !rows) {
        SCUBE_LOG.error('DB Error '+err);
        SCUBE_LOG.error('Rows Returned '+rows);
        returnMsg = 'DB Fatal Error while updating scubit';
        callback(returnMsg,returnData);
        return;
      }

       // Build jsonData for scubit insert success
      var jsonReqArray = {};
      jsonReqArray.reqtype = DEFS.CONST.JSON_TYPE['singleArraySingleObj'];
      jsonReqArray.reqData = rows;
      jsonReqArray.arrayName = 'success'; 
 
      jBuilder.buildDBDataJSON(jsonReqArray, function(jsonData) {
          // Send back the restructured data
        SCUBE_LOG.info('usp : usp_delete_scubit success');
        //SCUBE_LOG.info(jsonData);
        returnMsg = 'success';
        callback(returnMsg, jsonData);
        return;
      });
    });
  }

  this.update = function(scubitInfoArr, callback) {

    var returnData = {};
    var returnMsg;

    var updateScubit = new sp('usp_update_scubit');
    updateScubit.add(scubitInfoArr.scubit_id, false);
    updateScubit.add(scubitInfoArr.brand_id, false);
    updateScubit.add(scubitInfoArr.offer_id, false);
    updateScubit.add(scubitInfoArr.price_range_id, false);
    updateScubit.add(scubitInfoArr.payment_type_id, false);
    updateScubit.add(scubitInfoArr.start_date_time, true);
    updateScubit.add(scubitInfoArr.end_date_time, true);
    updateScubit.addOrAddNull(scubitInfoArr.notes, true);
    updateScubit.addOrAddNull(scubitInfoArr.photo_url, true);
    updateScubit.add(scubitInfoArr.gender_id, false);
    updateScubit.addOrAddNull(scubitInfoArr.number_of_items, true);
    
    dbConnect.query(updateScubit.call(), function(err, rows) {
      if(err || !rows) {

        SCUBE_LOG.error('DB Error '+err);
        SCUBE_LOG.error('Rows Returned '+rows);
        returnMsg = 'DB Fatal Error while updating scubit';
        callback(returnMsg,returnData);
        return;
      }

      returnMsg = "success";
      //SCUBE_LOG.info("Scube update successful");
      //SCUBE_LOG.info(returnData);
      callback(returnMsg,returnData);
    });
  }
}
module.exports = scubitsPostHelper;
