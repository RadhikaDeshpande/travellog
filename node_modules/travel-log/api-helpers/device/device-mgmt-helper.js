//////////////////////////////////////////////////////////////////////////
//                  Device API helpers
// Here we handle all transactions related to the user device
// Usage: 
// var device = require('sparkk/helpers/login/device-mgmt');
// var dev    = new device();
//////////////////////////////////////////////////////////////////////////

// Connect to the database
var dbConnect = require(DEFS.DIR.DB_CONNECT)('openshift');
var sp      	= require(DEFS.DIR.DB_SP);

// Sparkk device services
var servicesDevice        = require(DEFS.DIR.SERVICES_DEVICE);
servicesDeviceObj         = new servicesDevice();

var deviceMgmt = function() {

  // Save device info and GCM registration id in DB
  this.register = function(req, res, deviceInfo, callback) {

    // Make a service call which fires an API call to the defines endpoint : /apis/device/defines
    servicesDeviceObj.getDeviceDefines(function(deviceDefines) {

      // Received response from get device details service call
      if(typeof deviceDefines === 'undefined' || deviceDefines === "failure") {
        console.log("Device Mgmt API : Device defines was not found in service response");
        callback("failure");
        return;
      }
     
      // Now register the device by mapping the names to id's using device details
      var registerDeviceSp = new sp('usp_insert_device_details');

      _addSpParametersForDeviceRegistration(deviceInfo, deviceDefines, registerDeviceSp, function(registerDeviceSp) {

        dbConnect.query(registerDeviceSp.call(), function(err, rows) {
          if (err || !rows) {
            console.log("Device Mgmt API : Error while registering device in DB");
            console.log(err);
            callback("failure");
            return;
          }
            
          dbData = rows[0][0];
          // We got a valid response from DB
          console.log("Device Mgmt API : Device registration DB res message = "+dbData.reason);

          if(typeof dbData.device_id === 'undefined') {
            console.log("Device Mgmt API : Device id not present in db response");
            callback('failure');
            return
          }
          
          // Device information was successfully stored in DB (OR) device already exists in DB
          // In either case, return the device_id back
          callback(dbData.device_id);
          return;
        });

      });

    });

  }

  // Fetch the device details from DB using the provided device ID
  this.getDetails = function(req, res, deviceId, callback) {

    var deviceInfo = new sp('usp_get_device_details');
    deviceInfo.add(deviceId, false);

    dbConnect.query(deviceInfo.call(), function(err, rows) {
      if(err || !rows) {
        console.log('Error while fetching the device details for id : '+deviceId);
        callback('failure', 'Error while fetching the device details for id : '+deviceId);
        return;
      }

      if(!rows[0].length) {
        console.log('Device details not found for device with id : '+deviceId);
        callback('failure', 'Device details not found for device with id : '+deviceId);
        return; 
      }

      // Data returned
      // 'device_id'
      // 'imei'
      // 'variant'
      // 'os'
      // 'type'
      // 'gcm_reg_id'
      dbData = rows[0][0];

      // Send back the device details
      callback(dbData, null);
      return;
    });
  }

  this.getGcmId
  this.getDeviceDefines = function(req, res, callback) {

    var deviceDefines = new sp('usp_get_device_defines');

    dbConnect.query(deviceDefines.call(), function(err, rows) {
      if(err || !rows) {
        console.log('Error while fetching the device defines '+err);
        callback('failure');
        return;
      }

      /* Data format received
      {
        deviceVariant: [
          {
            device_variant_id: 1,
            variant_name: "Samsung"
          },
          {
            device_variant_id: 2,
            variant_name: "Motorola"
          }
        ],
        deviceOs: [
          {
            device_os_id: 1,
            os_name: "Android KitKat 4.4"
          },
          {
            device_os_id: 2,
            os_name: "Android JellyBean 4.3"
          }
        ],
        deviceType: [
          {
            device_type_id: 1,
            type_name: "Cellular Device 3G+"
          },
          {
            device_type_id: 4,
            type_name: "Default"
          }
        ]
      } */

      // Restructure the received db data into a key=value pair json object
      // for easy access by the requestor

      /* Restructured format
      {
        deviceVariant: {
          Samsung: 1,
          Motorola: 2
        },
        deviceOs: {
          Android KitKat 4.4: 1,
          Android JellyBean 4.3: 2
        },
        deviceType: {
          Cellular Device 3G+: 1,
          Default: 4
        }
      } */

      var defines = {};
      defines.deviceVariant = {};
      defines.deviceOs = {};
      defines.deviceType = {};
      for(i = 0; i<rows[0].length; i++) {
        defines.deviceVariant[rows[0][i].device_variant] = rows[0][i].device_variant_id;
      }
      for(i = 0; i<rows[1].length; i++) {
        defines.deviceOs[rows[1][i].os_name] = rows[1][i].device_os_id;
      }
      for(i = 0; i<rows[2].length; i++) {
        defines.deviceType[rows[2][i].type_name] = rows[2][i].device_type_id;
      }

      // Send back the restructured data
      callback(defines);
      return;
    });
  }


  // This is used for updating the social signup users deviceId, IMEI
  // info 
  this.UpdateUserDeviceId = function(req, res, deviceIdInfo, callback) {
 
    var updateDeviceLoginSp = new sp('usp_update_device_login');
     updateDeviceLoginSp.add(deviceIdInfo.IMEI, false);
     updateDeviceLoginSp.add(deviceIdInfo.deviceId, false);
     updateDeviceLoginSp.add(deviceIdInfo.userId, false);
 
     dbConnect.query(updateDeviceLoginSp.call(), function(err, rows) {
       if (err || !rows) {
           console.log("usp_update_device_login DB Error");
           console.log(err);
           callback("failure");
           return;
       }
       dbData = rows[0][0];
       if(dbData.status === DEFS.CONST.SP_DB_STATUS_INVALID_IMEI ||
         dbData.status === DEFS.CONST.SP_DB_STATUS_DEVICE_ID_USER_ID_MISMATCH) {
         console.log("usp_update_device_login Error status : " + dbData.status);
         callback("failure");
       }
       callback("success");
       return;
    });
  }


  // This is update the device login/logout status 
  this.userDeviceLoginLogout = function(req, res, info, callback) {
 
    var updateDeviceLoginLogoutSp = new sp('usp_update_user_device_logged_status');
     updateDeviceLoginLogoutSp.add(info.userId, false);
     updateDeviceLoginLogoutSp.add(info.deviceId, false);
     updateDeviceLoginLogoutSp.add(info.action, false);  
 
     dbConnect.query(updateDeviceLoginLogoutSp.call(), function(err, rows) {
       if (err) {
           console.log("usp_update_user_device_logged_status DB Error");
           console.log(err);
           callback("failure");
           return;
       }
       callback("success");
       return;
    });
  }

  // Returns the variant ID if present in the defines response, 
  // else makes a DB call to usp_add_device_variant and gets a fresh id
  var _getVariantId = function(variants, variant, callback) {

    // Check if already present in device defines
    if(typeof variants[variant] !== 'undefined') {
      callback(variants[variant]);
      return;
    }

    // If not, then send a request to DB for fresh variant ID
    var addDeviceVariant = new sp('usp_add_device_variant');
    addDeviceVariant.add(variant, true);

    dbConnect.query(addDeviceVariant.call(), function(err, rows) {
      if(err || !rows) {
        console.log('Error while adding the device variant' + err);

        // On DB error, send back the default device variant ID to
        // keep the registration flow working
        callback(variants['Default']);
        return;
      }

      // rows =
      /*
        [ 
          [ 
            { device_variant_id: 12 } 
          ],
          { fieldCount: 0,
            affectedRows: 0,
            insertId: 0,
            serverStatus: 2,
            warningCount: 0,
            message: '',
            protocol41: true,
            changedRows: 0 
          } 
        ]
      */
      callback(rows[0][0].device_variant_id);
      return;
    });
  }

  // Returns the OS ID if present in the defines response, 
  // else makes a DB call to usp_add_device_os and gets a fresh id
  var _getOsId = function(oses, os, callback) {

    // Check is already present in device defines
    if(typeof oses[os] !== 'undefined') {
      callback(oses[os]);
      return
    }

    // If not, then send a request to DB for fresh variant ID
    var addDeviceOs = new sp('usp_add_device_os');
    addDeviceOs.add(os, true);

    dbConnect.query(addDeviceOs.call(), function(err, rows) {
      if(err || !rows) {
        console.log('Error while adding the device OS' + err);

        // On DB error, send back the default device os ID to
        // keep the registration flow working
        callback(oses['Default']);
        return;
      }

      // rows =
      /*
        [ 
          [ 
            { device_os_id: 12 } 
          ],
          { fieldCount: 0,
            affectedRows: 0,
            insertId: 0,
            serverStatus: 2,
            warningCount: 0,
            message: '',
            protocol41: true,
            changedRows: 0 
          } 
        ]
      */
      callback(rows[0][0].device_os_id);
      return;
    });

  }

  var _addSpParametersForDeviceRegistration = function(deviceInfo, deviceDefines, registerDeviceSp, callback) {

    if(typeof deviceDefines === 'undefined') callback(null);

    if(typeof deviceInfo.IMEI === 'undefined') {
      deviceInfo.IMEI = 'Default';
    }
    registerDeviceSp.add(deviceInfo.IMEI, false);

    if(typeof deviceInfo.deviceType === 'undefined') {
      deviceInfo.deviceType = 'Default';
    }

    registerDeviceSp.add((deviceDefines.deviceType[deviceInfo.deviceType] ? deviceDefines.deviceType[deviceInfo.deviceType] : deviceDefines.deviceType['Default']), false);  // Add Type of device (cellular or wifi or web)

    // Check if the variant & OS names recieved is already present in DB
    // If not, make DB calls to create & fetch fresh id's for new ones 
    _getVariantId(deviceDefines.deviceVariant, deviceInfo.deviceVariant, function(deviceVariantId) {

      registerDeviceSp.add(deviceVariantId, false);

      _getOsId(deviceDefines.deviceOs, deviceInfo.deviceOs, function(deviceOsId) {

        registerDeviceSp.add(deviceOsId, false);

        // Add GCM registration ID (android version)
        registerDeviceSp.add(deviceInfo.gcmRegId, true);

        // Send the filled sp object
        callback(registerDeviceSp);

      });

    });

  }
}

module.exports = deviceMgmt;
